{"version":3,"sources":["cloth/watch.jpg","app/views/stock/shared/Doughnut.jsx","app/views/stock/shared/Campaigns.jsx","app/views/stock/shared/DataTable.jsx","app/views/stock/StockForm.jsx","app/views/stock/StockSnackbar.jsx","app/views/stock/AddStockForm.jsx","app/views/stock/shared/DataTableStocks.jsx","app/views/stock/Stock.jsx"],"names":["DoughnutChart","height","color","classes","makeStyles","palette","cardHolder","background","img","backgroundSize","backgroundRepeat","card","maxWidth","borderRadius","margin","opacity","buttonProgress","position","top","left","marginTop","marginLeft","useStyles","theme","useTheme","option","legend","show","itemGap","icon","bottom","textStyle","text","secondary","fontSize","fontFamily","tooltip","trigger","formatter","xAxis","axisLine","splitLine","yAxis","series","name","type","radius","center","avoidLabelOverlap","hoverOffset","stillShowZeroSum","label","normal","emphasis","fontWeight","labelLine","data","value","itemStyle","shadowBlur","shadowOffsetX","shadowColor","style","className","Campaigns","title","connect","state","categories","stocks","brands","selectedCategory","selectedBrand","selectedStock","dispatch","head","c","useState","selected","setSelected","select","selectCat","selectBrand","selectStock","useEffect","fetchCBS","columns","field","headerName","width","flex","minwidth","editable","rowsdata","filter","e","category_id","brand_id","console","log","onRowClick","param","event","id","rows","pageSize","selectionModel","loading","hasErrors","success","form","setState","onSubmit","postCategory","postBrand","onError","Grid","container","spacing","item","lg","md","sm","xs","display","align_items","onChange","persist","target","validators","errorMessages","Fab","align","size","variantIcon","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","useStyles1","backgroundColor","green","dark","primary","main","amber","iconVariant","marginRight","message","alignItems","MySnackbarContentWrapper","props","onClose","variant","other","Icon","SnackbarContent","clsx","action","IconButton","onClick","handleClose","reason","CLOSE_STOCK_SNACKBAR","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","fournisseurs","clients","fetchFou","note","quantity","date","Date","now","item_buying_price","item_sale_price","supplier","clearance","mystyle","React","checked1","setChecked1","checked2","setChecked2","handleChange","postStock","subcash","subprofit","utils","DateFnsUtils","disableToolbar","format","KeyboardButtonProps","inputStyle","alignContent","FormGroup","FormControlLabel","control","Switch","checked","defaultChecked","Select","labelId","map","MenuItem","paied","total","float","padding","Button","autoFocus","valueFormatter","params","getValue","toLocaleDateString","checkboxSelection","setOpen","Card","find","Dialog","DialogTitle","DialogContent","DialogContentText","Doughnut","light"],"mappings":"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","file":"static/js/46.9caffedd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/watch.8e53102c.jpg\";","import React from 'react'\r\nimport ReactEcharts from 'echarts-for-react'\r\nimport { makeStyles, useTheme } from '@material-ui/styles'\r\nimport { Card } from '@material-ui/core'\r\nimport img from '../../../../cloth/watch.jpg'\r\n\r\n\r\nconst DoughnutChart = ({ height, color = [] }) => {\r\n    const useStyles = makeStyles(({ palette, ...theme }) => ({\r\n        cardHolder: {\r\n            background: `url(${img})`,\r\n            backgroundSize:'100% auto',\r\n            backgroundRepeat:'no-repeat'\r\n        },\r\n        card: {\r\n            maxWidth: 800,\r\n            borderRadius: 12,\r\n            margin: '1rem',\r\n            opacity:'0.8',\r\n        },\r\n        buttonProgress: {\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            marginTop: -12,\r\n            marginLeft: -12,\r\n        },\r\n    }))\r\n    const classes=useStyles()\r\n    \r\n\r\n    \r\n    const theme = useTheme()\r\n\r\n    const option = {\r\n        legend: {\r\n            show: true,\r\n            itemGap: 20,\r\n            icon: 'circle',\r\n            bottom: 0,\r\n            textStyle: {\r\n                color: theme.palette.text.secondary,\r\n                fontSize: 13,\r\n                fontFamily: 'roboto',\r\n            },\r\n        },\r\n        tooltip: {\r\n            show: false,\r\n            trigger: 'item',\r\n            formatter: '{a} <br/>{b}: {c} ({d}%)',\r\n        },\r\n        xAxis: [\r\n            {\r\n                axisLine: {\r\n                    show: false,\r\n                },\r\n                splitLine: {\r\n                    show: false,\r\n                },\r\n            },\r\n        ],\r\n        yAxis: [\r\n            {\r\n                axisLine: {\r\n                    show: false,\r\n                },\r\n                splitLine: {\r\n                    show: false,\r\n                },\r\n            },\r\n        ],\r\n\r\n        series: [\r\n            {\r\n                name: 'Traffic Rate',\r\n                type: 'pie',\r\n                radius: ['45%', '72.55%'],\r\n                center: ['50%', '50%'],\r\n                avoidLabelOverlap: false,\r\n                hoverOffset: 5,\r\n                stillShowZeroSum: false,\r\n                label: {\r\n                    normal: {\r\n                        show: false,\r\n                        position: 'center', // shows the description data to center, turn off to show in right side\r\n                        textStyle: {\r\n                            color: theme.palette.text.secondary,\r\n                            fontSize: 13,\r\n                            fontFamily: 'roboto',\r\n                        },\r\n                        formatter: '{a}',\r\n                    },\r\n                    emphasis: {\r\n                        show: true,\r\n                        textStyle: {\r\n                            fontSize: '14',\r\n                            fontWeight: 'normal',\r\n                            // color: \"rgba(15, 21, 77, 1)\"\r\n                        },\r\n                        formatter: '{b} \\n{c} ({d}%)',\r\n                    },\r\n                },\r\n                labelLine: {\r\n                    normal: {\r\n                        show: false,\r\n                    },\r\n                },\r\n                data: [\r\n                    {\r\n                        value: 65,\r\n                        name: 'Google',\r\n                    },\r\n                    {\r\n                        value: 20,\r\n                        name: 'Facebook',\r\n                    },\r\n                    { value: 15, name: 'Others' },\r\n                ],\r\n                itemStyle: {\r\n                    emphasis: {\r\n                        shadowBlur: 10,\r\n                        shadowOffsetX: 0,\r\n                        shadowColor: 'rgba(0, 0, 0, 0.5)',\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    }\r\n\r\n    return (\r\n        <div style={{background: `url(${img})` ,backgroundSize:'100% auto',}}className={classes}>\r\n        <ReactEcharts\r\n\r\n            style={{ opacity:'0.1' }}\r\n            option={{\r\n                ...option,\r\n                color: [...color],\r\n            }}\r\n        /></div>\r\n    )\r\n\r\n}\r\n\r\nexport default DoughnutChart\r\n","import React from 'react'\r\nimport { SimpleCard, MatxProgressBar } from 'app/components'\r\n\r\nconst Campaigns = () => {\r\n    return (\r\n        <div>\r\n            <SimpleCard title=\"Campaigns\">\r\n                <small className=\"text-muted\">Today</small>\r\n                <div className=\"pt-2\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Google (102k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={45}\r\n                    color=\"secondary\"\r\n                    text=\"Twitter (40k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Tensor (80k)\"\r\n                />\r\n\r\n                <div className=\"py-3\" />\r\n                <small className=\"text-muted\">Yesterday</small>\r\n                <div className=\"pt-2\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Google (102k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={45}\r\n                    color=\"secondary\"\r\n                    text=\"Twitter (40k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Tensor (80k)\"\r\n                />\r\n\r\n                <div className=\"py-3\" />\r\n                <small className=\"text-muted\">Yesterday</small>\r\n                <div className=\"pt-2\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Google (102k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={45}\r\n                    color=\"secondary\"\r\n                    text=\"Twitter (40k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Tensor (80k)\"\r\n                />\r\n            </SimpleCard>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Campaigns\r\n","/*import React from 'react'\r\nimport {\r\n    Card,\r\n    Icon,\r\n    IconButton,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Avatar,\r\n    MenuItem,\r\n    Select,\r\n} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport clsx from 'clsx'\r\n\r\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\r\n    productTable: {\r\n        '& small': {\r\n            height: 15,\r\n            width: 50,\r\n            borderRadius: 500,\r\n            boxShadow:\r\n                '0 0 2px 0 rgba(0, 0, 0, 0.12), 0 2px 2px 0 rgba(0, 0, 0, 0.24)',\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-child': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    },\r\n}))\r\n\r\nconst TopSellingTable = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Card elevation={3} className=\"pt-5 mb-6\">\r\n            <div className=\"flex justify-between items-center px-6 mb-3\">\r\n                <span className=\"card-title\">top selling products</span>\r\n                <Select size=\"small\" defaultValue=\"this_month\" disableUnderline>\r\n                    <MenuItem value=\"this_month\">This Month</MenuItem>\r\n                    <MenuItem value=\"last_month\">Last Month</MenuItem>\r\n                </Select>\r\n            </div>\r\n            <div className=\"overflow-auto\">\r\n                <Table\r\n                    className={clsx(\r\n                        'whitespace-pre min-w-400',\r\n                        classes.productTable\r\n                    )}\r\n                >\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className=\"px-6\" colSpan={4}>\r\n                                Name\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={2}>\r\n                                Revenue\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={2}>\r\n                                Stock Status\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={1}>\r\n                                Action\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {productList.map((product, index) => (\r\n                            <TableRow key={index} hover>\r\n                                <TableCell\r\n                                    className=\"px-0 capitalize\"\r\n                                    colSpan={4}\r\n                                    align=\"left\"\r\n                                >\r\n                                    <div className=\"flex items-center\">\r\n                                        <Avatar src={product.imgUrl} />\r\n                                        <p className=\"m-0 ml-8\">\r\n                                            {product.name}\r\n                                        </p>\r\n                                    </div>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    className=\"px-0 capitalize\"\r\n                                    align=\"left\"\r\n                                    colSpan={2}\r\n                                >\r\n                                    $\r\n                                    {product.price > 999\r\n                                        ? (product.price / 1000).toFixed(1) +\r\n                                          'k'\r\n                                        : product.price}\r\n                                </TableCell>\r\n\r\n                                <TableCell\r\n                                    className=\"px-0\"\r\n                                    align=\"left\"\r\n                                    colSpan={2}\r\n                                >\r\n                                    {product.available ? (\r\n                                        product.available < 20 ? (\r\n                                            <small className=\"border-radius-4 bg-secondary text-white px-2 py-2px\">\r\n                                                {product.available} available\r\n                                            </small>\r\n                                        ) : (\r\n                                            <small className=\"border-radius-4 bg-primary text-white px-2 py-2px\">\r\n                                                in stock\r\n                                            </small>\r\n                                        )\r\n                                    ) : (\r\n                                        <small className=\"border-radius-4 bg-error text-white px-2 py-2px\">\r\n                                            out of stock\r\n                                        </small>\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell className=\"px-0\" colSpan={1}>\r\n                                    <IconButton>\r\n                                        <Icon color=\"primary\">edit</Icon>\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n        </Card>\r\n    )\r\n}*/\r\nimport React, { useEffect, useState} from 'react'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport {connect} from 'react-redux'\r\nimport { fetchCBS, selectBrand, selectCat, selectStock } from 'app/redux/actions/StockActions';\r\n\r\n\r\n\r\n\r\nconst  DataTable = ({dispatch,categories, selectedCategory,brands, selectedBrand, stocks,selectedStock,head,c}) =>{\r\n    const [selected, setSelected]=useState(1)\r\n    const select=[selectCat,selectBrand,selectStock]\r\n    useEffect(() => {\r\n        dispatch(fetchCBS())\r\n      }, [dispatch])\r\n     const handleRowClick=(param,event)=>{\r\n         setSelected(param.id)\r\n         dispatch(select[c](param.id))\r\n         if (c==\"0\")dispatch(select[1](0))\r\n      }\r\n      const columns = [\r\n        { field: 'id', headerName: 'ID', width: 40 },\r\n        {\r\n          field: 'name',\r\n          headerName: head,\r\n          flex: 1,\r\n          minwidth:150,\r\n      \r\n          editable: true,\r\n        },\r\n        \r\n      ];\r\n      const rowsdata=[categories,brands.filter(e=>e.category_id==selectedCategory),stocks.filter(e=>e.brand_id==selectedBrand)]\r\n      console.log(\"rowsdata\")\r\n      console.log(rowsdata)\r\n      //console.log(categories)\r\n  return (\r\n    <div style={{ height: 400, width: '100%' }}>\r\n        \r\n      <DataGrid \r\n      onRowClick={handleRowClick}\r\n        rows={rowsdata[c]||[]}\r\n        columns={columns}\r\n        pageSize={8}\r\n        \r\n        selectionModel={selected}        \r\n        \r\n      />\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    categories: state.stocks.categories,\r\n    brands: state.stocks.brands,\r\n    stocks: state.stocks.stocks,\r\n    selectedCategory: state.stocks.selectedCategory,\r\n    selectedBrand: state.stocks.selectedBrand,\r\n    selectedStock: state.stocks.selectedStock,\r\n  })\r\nexport default connect(mapStateToProps)(DataTable)\r\n\r\n\r\n\r\n/*const productList = [\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-2.jpg',\r\n        name: 'earphone',\r\n        price: 100,\r\n        available: 15,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-3.jpg',\r\n        name: 'earphone',\r\n        price: 1500,\r\n        available: 30,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/iphone-2.jpg',\r\n        name: 'iPhone x',\r\n        price: 1900,\r\n        available: 35,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/iphone-1.jpg',\r\n        name: 'iPhone x',\r\n        price: 100,\r\n        available: 0,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-3.jpg',\r\n        name: 'Head phone',\r\n        price: 1190,\r\n        available: 5,\r\n    },\r\n]\r\n\r\nexport default TopSellingTable*/\r\n","import React, { useState } from 'react'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport {  Icon, Grid, Fab } from '@material-ui/core'\r\n\r\nimport 'date-fns'\r\nimport { connect } from 'react-redux'\r\nimport { postBrand, postCategory } from 'app/redux/actions/StockActions'\r\n\r\nconst StockForm = ({ dispatch, form, c, selectedCategory }) => {\r\n    const [state, setState] = useState({ name: '' })\r\n    const handleSubmit = (event) => {\r\n        c == 0\r\n            ? dispatch(postCategory({ name: name }))\r\n            : dispatch(postBrand({ name: name, category_id: selectedCategory }))\r\n        setState({ name: '' })\r\n    }\r\n    const mystyle = {\r\n        display: 'flex',\r\n        align_items: 'stretch',\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        event.persist()\r\n        setState({\r\n            ...state,\r\n            [event.target.name]: event.target.value,\r\n        })\r\n    }\r\n\r\n    const { name } = state\r\n\r\n    return (<div>\r\n            \r\n            <ValidatorForm onSubmit={handleSubmit} onError={() => null}>\r\n                <Grid container spacing={6}>\r\n                    <Grid item lg={9} md={6} sm={12} xs={12}>\r\n                        <div style={mystyle}>\r\n                            <TextValidator\r\n                                className=\"mb-4 w-full\"\r\n                                label={form}\r\n                                onChange={handleChange}\r\n                                type=\"text\"\r\n                                name=\"name\"\r\n                                value={name || ''}\r\n                                validators={[\r\n                                    'required',\r\n                                    'minStringLength: 4',\r\n                                    'maxStringLength: 20',\r\n                                ]}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n\r\n                            <Fab\r\n                                style={{ align: 'right' }}\r\n                                size=\"small\"\r\n                                color=\"primary\"\r\n                                aria-label=\"add\"\r\n                                type=\"submit\"\r\n                            >\r\n                                <Icon>add_circle</Icon>\r\n                            </Fab>\r\n                        </div>\r\n                    </Grid>\r\n                </Grid>\r\n            </ValidatorForm>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    selectedCategory: state.stocks.selectedCategory,\r\n    categories: state.stocks.categories,\r\n    brands: state.stocks.brands,\r\n    stocks: state.stocks.stocks,\r\n    loading: state.stocks.loading,\r\n    hasErrors: state.stocks.hasErrors,\r\n    success: state.stocks.success,\r\n    selectedBrand: state.stocks.selectedBrand,\r\n    selectedStock: state.stocks.selectedStock,\r\n})\r\nexport default connect(mapStateToProps)(StockForm)\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport clsx from 'clsx'\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\r\nimport ErrorIcon from '@material-ui/icons/Error'\r\nimport InfoIcon from '@material-ui/icons/Info'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport { amber, green } from '@material-ui/core/colors'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\r\nimport WarningIcon from '@material-ui/icons/Warning'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { connect } from 'react-redux'\r\nimport { CLOSE_STOCK_SNACKBAR } from 'app/redux/actions/StockActions'\r\n\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n}\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}))\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1()\r\n    const { className, message, onClose, variant, ...other } = props\r\n    const Icon = variantIcon[variant]\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    {message}\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                    key=\"close\"\r\n                    aria-label=\"Close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    )\r\n}\r\n\r\nMySnackbarContentWrapper.propTypes = {\r\n    className: PropTypes.string,\r\n    message: PropTypes.node,\r\n    onClose: PropTypes.func,\r\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info'])\r\n        .isRequired,\r\n}\r\n\r\n\r\nconst StockSnackbar=({dispatch,success,hasErrors}) =>{\r\n    function handleClose(event, reason) {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n\r\n        dispatch({type:CLOSE_STOCK_SNACKBAR})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                open={(success||hasErrors)}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n            >\r\n                <MySnackbarContentWrapper\r\n                    onClose={handleClose}\r\n                    variant={hasErrors?'error':'success'}\r\n                    message={hasErrors?'item was not added':'Item added'}\r\n                />\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    hasErrors: state.stocks.hasErrors,\r\n    success: state.stocks.success,\r\n  })\r\nexport default connect(mapStateToProps)(StockSnackbar)\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport {\r\n    Button,\r\n    Grid,\r\n    Select,\r\n    MenuItem,\r\n    Switch,\r\n    FormGroup,\r\n    FormControlLabel,\r\n} from '@material-ui/core'\r\nimport 'date-fns'\r\nimport DateFnsUtils from '@date-io/date-fns'\r\n\r\nimport { connect } from 'react-redux'\r\nimport {\r\n    KeyboardDatePicker,\r\n    MuiPickersUtilsProvider,\r\n} from '@material-ui/pickers'\r\nimport { fetchFou } from 'app/redux/actions/FournisseurActions'\r\nimport { postStock } from 'app/redux/actions/StockActions'\r\n\r\nconst AddStockForm = ({\r\n    dispatch,\r\n    fournisseurs,\r\n    selectedBrand,\r\n}) => {\r\n    useEffect(() => {\r\n        dispatch(fetchFou())\r\n    }, [dispatch])\r\n    const [state, setState] = useState({\r\n        name: '',\r\n        note: '',\r\n        quantity: '',\r\n        date: Date.now(),\r\n        item_buying_price: '',\r\n        item_sale_price: '',\r\n        supplier: '',\r\n        clearance: '',\r\n    })\r\n    const mystyle = {\r\n        display: 'flex',\r\n        align_items: 'stretch',\r\n    }\r\n    const [checked1, setChecked1] = React.useState(true);\r\n    const [checked2, setChecked2] = React.useState(true);\r\n\r\n  const handleCheck1 = (event) => {\r\n    event.persist()\r\n\r\n    setChecked1(!checked1);\r\n  };\r\n  const handleCheck2 = (event) => {\r\n    event.persist()\r\n\r\n    setChecked2(!checked2);\r\n  };\r\n\r\n    const handleSubmit = (event) => {\r\n        dispatch(postStock({ ...state, brand_id: selectedBrand,subcash:checked1,subprofit:checked2 }))\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        event.persist()\r\n        setState({\r\n            ...state,\r\n            [event.target.name]: event.target.value,\r\n        })\r\n        if (\r\n            event.target.name == 'quantity' ||\r\n            event.target.name == 'item_buying_price'\r\n        ) {\r\n            event.persist()\r\n\r\n            setState({\r\n                ...state,\r\n                [event.target.name]: event.target.value,\r\n\r\n                clearance: null,\r\n            })\r\n        }\r\n    }\r\n\r\n    const {\r\n        name,\r\n        note,\r\n        quantity,\r\n        date,\r\n        item_buying_price,\r\n        item_sale_price,\r\n        supplier,\r\n        clearance,\r\n    } = state\r\n    const [selectedDate, setSelectedDate] = React.useState(\r\n        new Date('2014-08-18T21:11:54')\r\n    )\r\n\r\n    const handleDateChange = (date) => {\r\n        setState({\r\n            ...state,\r\n            date: date,\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <ValidatorForm onSubmit={handleSubmit} onError={() => null}>\r\n                <Grid container spacing={6}>\r\n                    <Grid item lg={12} md={12} sm={12} xs={12}>\r\n                        <TextValidator\r\n                            className=\"mb-4 w-full\"\r\n                            label=\"Name\"\r\n                            onChange={handleChange}\r\n                            type=\"text\"\r\n                            name=\"name\"\r\n                            value={name || ''}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                        />\r\n                        <TextValidator\r\n                            className=\"mb-4 w-full\"\r\n                            label=\"Note\"\r\n                            onChange={handleChange}\r\n                            type=\"text\"\r\n                            name=\"note\"\r\n                            value={note || ''}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                        />\r\n\r\n                        <TextValidator\r\n                            className=\"mb-4 w-full\"\r\n                            label=\"quantity\"\r\n                            onChange={handleChange}\r\n                            type=\"number\"\r\n                            name=\"quantity\"\r\n                            value={quantity || ''}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                        />\r\n                        <MuiPickersUtilsProvider utils={DateFnsUtils}>\r\n                            <KeyboardDatePicker\r\n                                disableToolbar\r\n                                variant=\"inline\"\r\n                                format=\"MM/dd/yyyy\"\r\n                                margin=\"normal\"\r\n                                id=\"date-picker-inline\"\r\n                                label=\"Date picker inline\"\r\n                                value={date}\r\n                                onChange={handleDateChange}\r\n                                KeyboardButtonProps={{\r\n                                    'aria-label': 'change date',\r\n                                }}\r\n                            />\r\n                        </MuiPickersUtilsProvider>\r\n                        <div style={mystyle}>\r\n                            <div style={{ flex: 0.8 }}>\r\n                                <TextValidator\r\n                                    inputStyle={{ alignContent: 'right' }}\r\n                                    className=\"mb-4 w-full\"\r\n                                    label=\"prix d'achat\"\r\n                                    onChange={handleChange}\r\n                                    type=\"number\"\r\n                                    name=\"item_buying_price\"\r\n                                    value={item_buying_price || ''}\r\n                                    validators={['required']}\r\n                                    errorMessages={['this field is required']}\r\n                                />\r\n                            </div>\r\n\r\n                            {/* <div style={{ flex: 0.2,verticalAlign:'bottom' }}><h3>,00 DA </h3></div>*/}\r\n                        </div>\r\n                        <TextValidator\r\n                            className=\"mb-4 w-full\"\r\n                            label=\"prix de vente\"\r\n                            onChange={handleChange}\r\n                            type=\"number\"\r\n                            name=\"item_sale_price\"\r\n                            value={item_sale_price || ''}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                        />\r\n                        <FormGroup>\r\n                            <FormControlLabel\r\n                                control={<Switch \r\n                                    checked={checked1}\r\n                                    onChange={handleCheck1}\r\n                                     defaultChecked />}\r\n                                label=\"Substract from cash(coffre)\"\r\n                            />\r\n                            <FormControlLabel\r\n                                \r\n                                control={<Switch  \r\n                                    checked={checked2}\r\n                                    onChange={handleCheck2}\r\n                                    defaultChecked/>}\r\n                                label=\"Substract from profit\"                                \r\n                                \r\n                            />\r\n                        </FormGroup>\r\n                        <div style={mystyle}>\r\n                            Fournisseur:\r\n                            <Select\r\n                                style={{ flex: 1 }}\r\n                                labelId=\"demo-simple-select-label\"\r\n                                name=\"supplier\"\r\n                                value={supplier}\r\n                                label=\"supplier\"\r\n                                onChange={handleChange}\r\n                            >\r\n                                {fournisseurs.map((e) => (\r\n                                    <MenuItem value={e.id}>\r\n                                        {e.name} {e.paied},00/{e.total},00 DA\r\n                                    </MenuItem>\r\n                                ))}\r\n                            </Select>\r\n                        </div>\r\n                        {supplier ? (\r\n                            <TextValidator\r\n                                className=\"mb-4 w-full\"\r\n                                label=\"Total a paye\"\r\n                                onChange={handleChange}\r\n                                type=\"number\"\r\n                                name=\"clearance\"\r\n                                value={\r\n                                    clearance || quantity * item_buying_price\r\n                                }\r\n                                validators={['required']}\r\n                                errorMessages={['this field is required']}\r\n                            />\r\n                        ) : (\r\n                            ''\r\n                        )}\r\n                    </Grid>\r\n                </Grid>\r\n                <div style={{ float: 'right', padding: 2 }}>\r\n                    <Button\r\n                        color=\"primary\"\r\n                        autoFocus\r\n                        type=\"submit\"\r\n                        variant=\"outlined\"\r\n                    >\r\n                        Ajouter Stock\r\n                    </Button>\r\n                </div>\r\n            </ValidatorForm>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    fournisseurs: state.fournisseurs.fournisseurs,\r\n\r\n    loading: state.clients.loading,\r\n    clients: state.clients.clients,\r\n    hasErrors: state.clients.hasErrors,\r\n    selectedBrand: state.stocks.selectedBrand,\r\n})\r\nexport default connect(mapStateToProps)(AddStockForm)\r\n","\r\nimport React, { useEffect, useState} from 'react'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport {connect} from 'react-redux'\r\nimport { fetchCBS } from 'app/redux/actions/StockActions';\r\n\r\n\r\n\r\nconst columns = [\r\n  {\r\n    field: 'brand_name',\r\n    headerName: \"Brand:Stock \",\r\n   width: 150,\r\n   valueFormatter: (params) =>\r\n   `${params.getValue(params.id, 'brand_name')}:${params.getValue(params.id, 'name')}`\r\n   \r\n  },\r\n  \r\n  {\r\n    field: 'quantity',\r\n    headerName: 'quantity',\r\n    type: 'number',\r\n   width: 120,  },\r\n  {\r\n    field: 'instock',\r\n    headerName: 'instock',\r\n    type: 'number',\r\n   width: 120,  },\r\n  {\r\n    field: 'item_buying_price',\r\n    headerName: 'Prix d\\'achat',\r\n    type: 'number',\r\n   width: 120,    editable: true,\r\n    valueFormatter: (params) =>\r\n    `${params.getValue(params.id, 'item_buying_price')+',00 DA'}`\r\n  },\r\n  {\r\n    field: 'item_sale_price',\r\n    headerName: 'Prix de vente',\r\n    type: 'number',\r\n   width: 120,    editable: true,\r\n    valueFormatter: (params) =>\r\n    `${params.getValue(params.id, 'item_sale_price')+',00 DA'}`\r\n  },\r\n  \r\n  {\r\n    field: 'date',\r\n    headerName: 'date',\r\n    type: 'date',\r\n   width: 120,    editable: true,\r\n    valueFormatter: (params) =>\r\n    `${new Date(params.getValue(params.id, 'date')).toLocaleDateString()}`\r\n  },\r\n];\r\n\r\n\r\n\r\nconst  DataTableStocks = ({dispatch,stocks}) =>{\r\n    const [selected, setSelected]=useState(1)\r\n    useEffect(() => {\r\n        dispatch(fetchCBS())\r\n      }, [dispatch])\r\n     const handleRowClick=(param,event)=>{\r\n         setSelected(param.id)\r\n\r\n      }\r\n  return (\r\n    <div style={{ height: 400, width: '100%' }}>\r\n        \r\n      <DataGrid\r\n      onRowClick={handleRowClick}\r\n        rows={stocks||[]}\r\n        columns={columns}\r\n        pageSize={5}\r\n        checkboxSelection\r\n        selectionModel={selected}        \r\n        \r\n      />\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n \r\n    stocks: state.stocks.stocks,\r\n  })\r\nexport default connect(mapStateToProps)(DataTableStocks)\r\n\r\n\r\n\r\n\r\n","import React, { Fragment, useEffect, useState } from 'react'\r\nimport {\r\n    Grid,\r\n    Card,\r\n    Fab,\r\n    Icon,\r\n    Dialog,\r\n    DialogTitle,\r\n    DialogContentText,\r\n    DialogContent,\r\n    DialogActions,\r\n    Button,\r\n} from '@material-ui/core'\r\nimport DoughnutChart from './shared/Doughnut'\r\nimport Campaigns from './shared/Campaigns'\r\nimport { useTheme } from '@material-ui/styles'\r\nimport DataTable from './shared/DataTable'\r\nimport StockForm from './StockForm'\r\nimport StockSnackbar from './StockSnackbar'\r\nimport { connect } from 'react-redux'\r\nimport AddStockForm from './AddStockForm'\r\nimport DataTableStocks from './shared/DataTableStocks'\r\nconst Stock = ({\r\n    dispatch,\r\n    selectedCategory,\r\n    selectedBrand,\r\n    categories,\r\n    brands,\r\n}) => {\r\n    const theme = useTheme()\r\n    const [open, setOpen] = useState(false)\r\n    const mystyle = {\r\n        display: 'flex',\r\n        align_items: 'stretch',\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <StockSnackbar />\r\n\r\n            <div className=\"analytics m-sm-30 mt-6\">\r\n                <Grid container spacing={3} xs={24}>\r\n                    <Grid  item lg={8} md={8} sm={12} xs={12}>\r\n                        <>\r\n                            {/* Top Selling Products */}\r\n                            <Grid item lg={12} md={12} sm={12} xs={12} >\r\n                                <Card className=\"px-6 py-4 mb-6\">\r\n                                <Grid container>\r\n\r\n                                    <Grid item lg={4} md={4} sm={6} xs={12}>\r\n                                        <div>\r\n                                            <DataTable head=\"Category\" c=\"0\" />\r\n                                            <StockForm\r\n                                                c=\"0\"\r\n                                                form=\"add category\"\r\n                                            />\r\n                                        </div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item lg={4} md={4} sm={6} xs={12}>\r\n                                        <div>\r\n                                            <DataTable\r\n                                                head=\"Mark (model)\"\r\n                                                c=\"1\"\r\n                                            />\r\n                                            <StockForm c=\"1\" form=\"add Mark\" />\r\n                                        </div>\r\n                                    </Grid>\r\n\r\n                                    <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                                        <div>\r\n                                            <DataTable head=\"Stock\" c=\"2\" />{' '}\r\n                                            {selectedBrand &&\r\n                                            selectedCategory ? (\r\n                                                <div\r\n                                                    style={{\r\n                                                        alignItems: 'center',\r\n                                                        display: 'flex',\r\n                                                    }}\r\n                                                >\r\n                                                    {' '}\r\n                                                    <Button\r\n                                                        className=\"pt-2\"\r\n                                                        color=\"secondary\"\r\n                                                        variant=\"contained\"\r\n                                                        onClick={() =>\r\n                                                            setOpen(true)\r\n                                                        }\r\n                                                    >\r\n                                                        <Icon>\r\n                                                            shopping_cart\r\n                                                        </Icon>\r\n                                                        <span className=\"pl-1 capitalize\">\r\n                                                            Add Stock to{' '}\r\n                                                            {\r\n                                                                categories?.find(\r\n                                                                    (e) =>\r\n                                                                        e.id ==\r\n                                                                        selectedCategory\r\n                                                                )?.name\r\n                                                            }\r\n                                                            :\r\n                                                            {\r\n                                                                brands?.find(\r\n                                                                    (e) =>\r\n                                                                        e.id ==\r\n                                                                        selectedBrand\r\n                                                                )?.name\r\n                                                            }\r\n                                                        </span>\r\n                                                    </Button>\r\n                                                </div>\r\n                                            ) : (\r\n                                                ''\r\n                                            )}\r\n                                        </div>\r\n                                    </Grid>\r\n\r\n                                    <div>\r\n                                        <Dialog\r\n                                            open={open}\r\n                                            onClose={() => setOpen(false)}\r\n                                            aria-labelledby=\"alert-dialog-title\"\r\n                                            aria-describedby=\"alert-dialog-description\"\r\n                                        >\r\n                                            <DialogTitle id=\"alert-dialog-title\">\r\n                                                {'Ajouter  un stock?'}\r\n                                            </DialogTitle>\r\n                                            <DialogContent>\r\n                                                <DialogContentText id=\"alert-dialog-description\">\r\n                                                    ********************************************************************\r\n                                                    ********************************************************************\r\n                                                    ********************************************************************\r\n                                                </DialogContentText>\r\n                                                <AddStockForm></AddStockForm>\r\n                                            </DialogContent>\r\n                                        </Dialog>\r\n                                    </div>\r\n                            </Grid>\r\n\r\n                                </Card>\r\n                            </Grid>\r\n\r\n                            <Card className=\"px-6 py-4 mb-6 bg-light-green\">\r\n                                <div className=\"card-title\">List Stocks</div>\r\n                                <DataTableStocks />\r\n                            </Card>\r\n                        </>\r\n                    </Grid>\r\n\r\n                    <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                        <Card>\r\n                            <DoughnutChart\r\n                                height=\"300px\"\r\n                                color={[\r\n                                    theme.palette.primary.dark,\r\n                                    theme.palette.primary.main,\r\n                                    theme.palette.primary.light,\r\n                                ]}\r\n                            />\r\n                        </Card>\r\n\r\n                        <Campaigns />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    categories: state.stocks.categories,\r\n    brands: state.stocks.brands,\r\n    stocks: state.stocks.stocks,\r\n    selectedCategory: state.stocks.selectedCategory,\r\n    selectedBrand: state.stocks.selectedBrand,\r\n    selectedStock: state.stocks.selectedStock,\r\n})\r\nexport default connect(mapStateToProps)(Stock)\r\n"],"sourceRoot":""}
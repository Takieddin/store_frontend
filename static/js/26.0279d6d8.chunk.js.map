{"version":3,"sources":["app/views/material-kit/dialog/SimpleDialog.jsx","app/views/material-kit/forms/CustomizedSnackbar.jsx","app/views/material-kit/forms/SimpleForm.jsx","app/views/material-kit/forms/addPaymentSnackbar.jsx","app/views/material-kit/forms/AddPayment.jsx","cloth/mankan.jpg","app/views/listClients/shared/Doughnut.jsx","app/views/listClients/shared/Campaigns.jsx","app/views/listClients/shared/DataTable.jsx","app/views/listClients/shared/DataTablePayments.jsx","app/views/listClients/shared/DataTableBaskets.jsx","app/views/listClients/FullWidthTabs.jsx","app/views/listClients/shared/DataTableProcesses.jsx","app/views/listClients/Clients.jsx"],"names":["emails","useStyles","makeStyles","avatar","backgroundColor","blue","color","SimpleDialog","props","classes","onClose","selectedValue","other","handleListItemClick","value","id","map","email","button","onClick","className","primary","SimpleDialogDemo","React","useState","open","setOpen","setSelectedValue","variant","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","useStyles1","theme","green","palette","dark","main","amber","icon","fontSize","iconVariant","opacity","marginRight","spacing","message","display","alignItems","MySnackbarContentWrapper","Icon","SnackbarContent","clsx","action","IconButton","connect","state","loading","clients","hasErrors","ploading","payments","psuc","suc","phasErrors","dispatch","handleClose","event","reason","type","CLOSE_SNACKBAR","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","username","mobile","setState","handleChange","persist","target","name","CustomizedSnackbar","onSubmit","addClient","phone","onError","Grid","container","item","lg","md","sm","xs","label","onChange","validators","errorMessages","Button","selectedClient","selected","selectedProcess","processes","amount","addPayment","date","client_id","process_id","SELECT_PROCESS","payload","parseInt","DoughnutChart","height","cardHolder","background","img","backgroundSize","backgroundRepeat","card","maxWidth","borderRadius","margin","buttonProgress","position","top","left","marginTop","marginLeft","useTheme","option","legend","show","itemGap","bottom","textStyle","text","secondary","fontFamily","tooltip","trigger","formatter","xAxis","axisLine","splitLine","yAxis","series","radius","center","avoidLabelOverlap","hoverOffset","stillShowZeroSum","normal","emphasis","fontWeight","labelLine","data","itemStyle","shadowBlur","shadowOffsetX","shadowColor","style","Campaigns","title","columns","field","headerName","minWidth","editable","flex","renderCell","params","v","getValue","MatxProgressBar","toFixed","valueFormatter","Date","toLocaleDateString","setSelected","useEffect","fetchClients","width","onRowClick","param","SELECT_CLIENT","rows","pageSize","checkboxSelection","selectionModel","selectedprocess","getPayments","filter","e","AddPayment","sortable","handleClick","size","baskets","TabPanel","children","index","role","hidden","Box","p","Typography","a11yProps","root","paper","FullWidthTabs","setValue","AppBar","Tabs","newValue","indicatorColor","textColor","Tab","axis","direction","onChangeIndex","dir","selectedclient","fetchProcesses","Clients","Card","SimpleForm","Doughnut","light"],"mappings":"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","file":"static/js/26.0279d6d8.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button'\r\nimport Avatar from '@material-ui/core/Avatar'\r\nimport List from '@material-ui/core/List'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport PersonIcon from '@material-ui/icons/Person'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { blue } from '@material-ui/core/colors'\r\n\r\nconst emails = ['username@gmail.com', 'user02@gmail.com']\r\nconst useStyles = makeStyles({\r\n    avatar: {\r\n        backgroundColor: blue[100],\r\n        color: blue[600],\r\n    },\r\n})\r\n\r\nfunction SimpleDialog(props) {\r\n    const classes = useStyles()\r\n    const { onClose, selectedValue, ...other } = props\r\n\r\n    function handleClose() {\r\n        onClose(selectedValue)\r\n    }\r\n\r\n    function handleListItemClick(value) {\r\n        onClose(value)\r\n    }\r\n\r\n    return (\r\n        <Dialog\r\n            onClose={handleClose}\r\n            aria-labelledby=\"simple-dialog-title\"\r\n            {...other}\r\n        >\r\n            <DialogTitle id=\"simple-dialog-title\">\r\n                Set backup account\r\n            </DialogTitle>\r\n            <List>\r\n                {emails.map((email) => (\r\n                    <ListItem\r\n                        button\r\n                        onClick={() => handleListItemClick(email)}\r\n                        key={email}\r\n                    >\r\n                        <ListItemAvatar>\r\n                            <Avatar className={classes.avatar}>\r\n                                <PersonIcon />\r\n                            </Avatar>\r\n                        </ListItemAvatar>\r\n                        <ListItemText primary={email} />\r\n                    </ListItem>\r\n                ))}\r\n\r\n                <ListItem\r\n                    button\r\n                    onClick={() => handleListItemClick('addAccount')}\r\n                >\r\n                    <ListItemAvatar>\r\n                        <Avatar>\r\n                            <AddIcon />\r\n                        </Avatar>\r\n                    </ListItemAvatar>\r\n                    <ListItemText primary=\"add account\" />\r\n                </ListItem>\r\n            </List>\r\n        </Dialog>\r\n    )\r\n}\r\n\r\nSimpleDialog.propTypes = {\r\n    onClose: PropTypes.func,\r\n    open: PropTypes.bool,\r\n    selectedValue: PropTypes.string,\r\n}\r\n\r\nexport default function SimpleDialogDemo() {\r\n    const [open, setOpen] = React.useState(false)\r\n    const [selectedValue, setSelectedValue] = React.useState(emails[1])\r\n\r\n    function handleClickOpen() {\r\n        setOpen(true)\r\n    }\r\n\r\n    const handleClose = (value) => {\r\n        setOpen(false)\r\n        setSelectedValue(value)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Typography variant=\"subtitle1\">\r\n                Selected: {selectedValue}\r\n            </Typography>\r\n            <br />\r\n            <Button\r\n                variant=\"outlined\"\r\n                color=\"primary\"\r\n                onClick={handleClickOpen}\r\n            >\r\n                Open simple dialog\r\n            </Button>\r\n            <SimpleDialog\r\n                selectedValue={selectedValue}\r\n                open={open}\r\n                onClose={handleClose}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport clsx from 'clsx'\r\nimport Button from '@material-ui/core/Button'\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\r\nimport ErrorIcon from '@material-ui/icons/Error'\r\nimport InfoIcon from '@material-ui/icons/Info'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport { amber, green } from '@material-ui/core/colors'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\r\nimport WarningIcon from '@material-ui/icons/Warning'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { connect } from 'react-redux'\r\nimport { CLOSE_SNACKBAR } from 'app/redux/actions/ClientActions'\r\n\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n}\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}))\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1()\r\n    const { className, message, onClose, variant, ...other } = props\r\n    const Icon = variantIcon[variant]\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    {message}\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                    key=\"close\"\r\n                    aria-label=\"Close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    )\r\n}\r\n\r\nMySnackbarContentWrapper.propTypes = {\r\n    className: PropTypes.string,\r\n    message: PropTypes.node,\r\n    onClose: PropTypes.func,\r\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info'])\r\n        .isRequired,\r\n}\r\n\r\n\r\nconst CustomizedSnackbars=({dispatch, loading, clients, hasErrors,ploading, psuc, phasErrors,}) =>{\r\n    function handleClose(event, reason) {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n\r\n        dispatch({type:CLOSE_SNACKBAR})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                open={(loading||hasErrors)||(psuc||phasErrors)}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n            >\r\n                <MySnackbarContentWrapper\r\n                    onClose={handleClose}\r\n                    variant={phasErrors||hasErrors?'error':'success'}\r\n                    message={phasErrors||hasErrors?phasErrors?'payment was not added':'Client was not added':psuc?'Payment added':\"Client added\"}\r\n                />\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.clients.loading,\r\n    clients: state.clients.clients,\r\n    hasErrors: state.clients.hasErrors,\r\n    ploading: state.payments.loading,\r\n    psuc: state.payments.suc,\r\n    phasErrors: state.payments.hasErrors,\r\n  })\r\nexport default connect(mapStateToProps)(CustomizedSnackbars)\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport {\r\n    Button,\r\n    Icon,\r\n    Grid,\r\n} from '@material-ui/core'\r\nimport 'date-fns'\r\nimport { addClient } from 'app/redux/actions/ClientActions'\r\nimport { connect } from 'react-redux'\r\nimport CustomizedSnackbars from './CustomizedSnackbar'\r\n\r\n\r\n\r\nconst SimpleForm = ({dispatch, loading, clients, hasErrors}) => {\r\n    const [state, setState] = useState({username:'',mobile:''})\r\n\r\n\r\n    const handleSubmit = (event) => {\r\n        dispatch( addClient({name:username,phone:mobile}))\r\n        if (loading) setState({...state,username:'',mobile:''})\r\n        if (hasErrors) setState({...state,username:'',mobile:''})\r\n        \r\n\r\n       \r\n         \r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        event.persist()\r\n        setState({\r\n            ...state,\r\n            [event.target.name]: event.target.value,\r\n        })\r\n    }\r\n\r\n   \r\n    const {\r\n        username,\r\n        mobile,\r\n    \r\n    } = state\r\n\r\n    return (\r\n        <div>\r\n                                        <CustomizedSnackbars/>\r\n            <ValidatorForm onSubmit={handleSubmit} onError={() => null}>\r\n                <Grid container spacing={6}>\r\n                    <Grid item lg={5} md={6} sm={12} xs={12}>\r\n                        <TextValidator\r\n                            className=\"mb-4 w-full\"\r\n                            label=\"Username (Min length 4, Max length 20)\"\r\n                            onChange={handleChange}\r\n                            type=\"text\"\r\n                            name=\"username\"\r\n                            value={username || ''}\r\n                            validators={[\r\n                                'required',\r\n                                'minStringLength: 4',\r\n                                'maxStringLength: 20',\r\n                            ]}\r\n                            errorMessages={['this field is required']}\r\n                        />\r\n                    </Grid>\r\n\r\n                       \r\n\r\n                    <Grid item lg={4} md={6} sm={12} xs={12}>\r\n                        <TextValidator\r\n                            className=\"mb-4 w-full\"\r\n                            label=\"Mobile Nubmer\"\r\n                            onChange={handleChange}\r\n                            type=\"text\"\r\n                            name=\"mobile\"\r\n                            value={mobile || ''}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                        />\r\n                        \r\n                    </Grid>\r\n                    <Grid item lg={3} md={4} sm={4} xs={12} >\r\n                        <Button color=\"primary\" variant=\"contained\" type=\"submit\" >\r\n                        <Icon>send</Icon>\r\n                        <span className=\"pl-1 capitalize\">Ajouter Client</span>\r\n                        </Button>\r\n                    </Grid>\r\n\r\n\r\n                </Grid>\r\n                \r\n            </ValidatorForm>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.clients.loading,\r\n    clients: state.clients.clients,\r\n    hasErrors: state.clients.hasErrors,\r\n  })\r\nexport default connect(mapStateToProps)(SimpleForm)\r\n\r\n\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport clsx from 'clsx'\r\nimport Button from '@material-ui/core/Button'\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\r\nimport ErrorIcon from '@material-ui/icons/Error'\r\nimport InfoIcon from '@material-ui/icons/Info'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport { amber, green } from '@material-ui/core/colors'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\r\nimport WarningIcon from '@material-ui/icons/Warning'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { connect } from 'react-redux'\r\nimport { CLOSE_SNACKBAR } from 'app/redux/actions/ClientActions'\r\n\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n}\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}))\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1()\r\n    const { className, message, onClose, variant, ...other } = props\r\n    const Icon = variantIcon[variant]\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    {message}\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                    key=\"close\"\r\n                    aria-label=\"Close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    )\r\n}\r\n\r\nMySnackbarContentWrapper.propTypes = {\r\n    className: PropTypes.string,\r\n    message: PropTypes.node,\r\n    onClose: PropTypes.func,\r\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info'])\r\n        .isRequired,\r\n}\r\n\r\n\r\nconst addPaymentSnackbar=({dispatch,suc,loading,hasErrors}) =>{\r\n    function handleClose(event, reason) {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n\r\n        dispatch({type:CLOSE_SNACKBAR})\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                open={(suc||hasErrors||true)}\r\n                autoHideDuration={6000}\r\n                onClose={handleClose}\r\n            >\r\n                <MySnackbarContentWrapper\r\n                    onClose={handleClose}\r\n                    variant={hasErrors?'error':'success'}\r\n                    message={hasErrors?'Payment was not added':'Payment added'}\r\n                />\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.payments.loading,\r\n    suc: state.payments.suc,\r\n    hasErrors: state.payments.hasErrors,\r\n  })\r\nexport default connect(mapStateToProps)(addPaymentSnackbar)\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport { ValidatorForm, TextValidator } from 'react-material-ui-form-validator'\r\nimport {\r\n    Button,\r\n    Icon,\r\n    Grid,\r\n   \r\n} from '@material-ui/core'\r\n\r\nimport 'date-fns'\r\nimport { addClient } from 'app/redux/actions/ClientActions'\r\nimport { connect } from 'react-redux'\r\nimport { addPayment } from 'app/redux/actions/PaymentActions'\r\nimport addPaymentSnackbar from './addPaymentSnackbar'\r\nimport { fetchProcesses, SELECT_PROCESS } from 'app/redux/actions/ProcessActions'\r\n\r\nconst AddPayment = ({\r\n    dispatch,\r\n    suc,\r\n    loading,\r\n    hasErrors,\r\n    selectedClient,\r\n    selectedProcess,\r\n}) => {\r\n    const [state, setState] = useState({ amount: ''})\r\n\r\n    const handleSubmit = (event) => {\r\n        dispatch(addPayment({ amount: amount,date:null,client_id:selectedClient , process_id:selectedProcess }))\r\n        setState({ amount: ''})\r\n        dispatch({type:SELECT_PROCESS,payload:selectedProcess})\r\n\r\n    }\r\n\r\n    const handleChange = (event) => {\r\n        event.persist()\r\n        setState({\r\n            ...state,\r\n            [event.target.name]:parseInt( event.target.value),\r\n        })\r\n    }\r\n\r\n    const { amount } = state\r\n\r\n    return (\r\n        <div>\r\n            <ValidatorForm onSubmit={handleSubmit} onError={() => null}>\r\n                <Grid container spacing={6}>\r\n\r\n                    <Grid item lg={4} md={6} sm={12} xs={12}>\r\n                        <TextValidator\r\n                            className=\"mb-4 w-full\"\r\n                            label=\"amount\"\r\n                            onChange={handleChange}\r\n                            type=\"text\"\r\n                            name=\"amount\"\r\n                            value={amount}\r\n                            validators={['required']}\r\n                            errorMessages={['this field is required']}\r\n                        />\r\n                    </Grid>\r\n                    <Grid item lg={3} md={4} sm={4} xs={12}>\r\n                        <Button\r\n                            color=\"primary\"\r\n                            variant=\"contained\"\r\n                            type=\"submit\"\r\n                        >\r\n                            <Icon>queue</Icon>\r\n                            <span className=\"pl-1 capitalize\">Add payment</span>\r\n                        </Button>\r\n                    </Grid>\r\n                </Grid>\r\n            </ValidatorForm>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    suc:state.payments.suc,\r\n    loading: state.payments.loading,\r\n    hasErrors: state.payments.hasErrors,\r\n    selectedClient: state.clients.selected,\r\n    selectedProcess: state.processes.selected,\r\n})\r\nexport default connect(mapStateToProps)(AddPayment)\r\n","export default __webpack_public_path__ + \"static/media/mankan.28922708.jpg\";","import React from 'react'\r\nimport ReactEcharts from 'echarts-for-react'\r\nimport { makeStyles, useTheme } from '@material-ui/styles'\r\nimport { Card } from '@material-ui/core'\r\nimport img from '../../../../cloth/mankan.jpg'\r\n\r\n\r\nconst DoughnutChart = ({ height, color = [] }) => {\r\n    const useStyles = makeStyles(({ palette, ...theme }) => ({\r\n        cardHolder: {\r\n            background: `url(${img})`,\r\n            backgroundSize:'100% auto',\r\n            backgroundRepeat:'no-repeat'\r\n\r\n        },\r\n        card: {\r\n            maxWidth: 800,\r\n            borderRadius: 12,\r\n            margin: '1rem',\r\n            opacity:'0.8',\r\n        },\r\n        buttonProgress: {\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            marginTop: -12,\r\n            marginLeft: -12,\r\n        },\r\n    }))\r\n    const classes=useStyles()\r\n    \r\n\r\n    \r\n    const theme = useTheme()\r\n\r\n    const option = {\r\n        legend: {\r\n            show: true,\r\n            itemGap: 20,\r\n            icon: 'circle',\r\n            bottom: 0,\r\n            textStyle: {\r\n                color: theme.palette.text.secondary,\r\n                fontSize: 13,\r\n                fontFamily: 'roboto',\r\n            },\r\n        },\r\n        tooltip: {\r\n            show: false,\r\n            trigger: 'item',\r\n            formatter: '{a} <br/>{b}: {c} ({d}%)',\r\n        },\r\n        xAxis: [\r\n            {\r\n                axisLine: {\r\n                    show: false,\r\n                },\r\n                splitLine: {\r\n                    show: false,\r\n                },\r\n            },\r\n        ],\r\n        yAxis: [\r\n            {\r\n                axisLine: {\r\n                    show: false,\r\n                },\r\n                splitLine: {\r\n                    show: false,\r\n                },\r\n            },\r\n        ],\r\n\r\n        series: [\r\n            {\r\n                name: 'Traffic Rate',\r\n                type: 'pie',\r\n                radius: ['45%', '72.55%'],\r\n                center: ['50%', '50%'],\r\n                avoidLabelOverlap: false,\r\n                hoverOffset: 5,\r\n                stillShowZeroSum: false,\r\n                label: {\r\n                    normal: {\r\n                        show: false,\r\n                        position: 'center', // shows the description data to center, turn off to show in right side\r\n                        textStyle: {\r\n                            color: theme.palette.text.secondary,\r\n                            fontSize: 13,\r\n                            fontFamily: 'roboto',\r\n                        },\r\n                        formatter: '{a}',\r\n                    },\r\n                    emphasis: {\r\n                        show: true,\r\n                        textStyle: {\r\n                            fontSize: '14',\r\n                            fontWeight: 'normal',\r\n                            // color: \"rgba(15, 21, 77, 1)\"\r\n                        },\r\n                        formatter: '{b} \\n{c} ({d}%)',\r\n                    },\r\n                },\r\n                labelLine: {\r\n                    normal: {\r\n                        show: false,\r\n                    },\r\n                },\r\n                data: [\r\n                    {\r\n                        value: 65,\r\n                        name: 'Google',\r\n                    },\r\n                    {\r\n                        value: 20,\r\n                        name: 'Facebook',\r\n                    },\r\n                    { value: 15, name: 'Others' },\r\n                ],\r\n                itemStyle: {\r\n                    emphasis: {\r\n                        shadowBlur: 10,\r\n                        shadowOffsetX: 0,\r\n                        shadowColor: 'rgba(0, 0, 0, 0.5)',\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    }\r\n\r\n    return (\r\n        <div style={{background: `url(${img})` ,backgroundSize:'100% auto',}}className={classes}>\r\n        <ReactEcharts\r\n\r\n            style={{ opacity:'0.1' }}\r\n            option={{\r\n                ...option,\r\n                color: [...color],\r\n            }}\r\n        /></div>\r\n    )\r\n\r\n}\r\n\r\nexport default DoughnutChart\r\n","import React from 'react'\r\nimport { SimpleCard, MatxProgressBar } from 'app/components'\r\n\r\nconst Campaigns = () => {\r\n    return (\r\n        <div>\r\n            <SimpleCard title=\"Campaigns\">\r\n                <small className=\"text-muted\">Today</small>\r\n                <div className=\"pt-2\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Google (102k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={45}\r\n                    color=\"secondary\"\r\n                    text=\"Twitter (40k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Tensor (80k)\"\r\n                />\r\n\r\n                <div className=\"py-3\" />\r\n                <small className=\"text-muted\">Yesterday</small>\r\n                <div className=\"pt-2\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Google (102k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={45}\r\n                    color=\"secondary\"\r\n                    text=\"Twitter (40k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Tensor (80k)\"\r\n                />\r\n\r\n                <div className=\"py-3\" />\r\n                <small className=\"text-muted\">Yesterday</small>\r\n                <div className=\"pt-2\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Google (102k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={45}\r\n                    color=\"secondary\"\r\n                    text=\"Twitter (40k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Tensor (80k)\"\r\n                />\r\n            </SimpleCard>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Campaigns\r\n","/*import React from 'react'\r\nimport {\r\n    Card,\r\n    Icon,\r\n    IconButton,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Avatar,\r\n    MenuItem,\r\n    Select,\r\n} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport clsx from 'clsx'\r\n\r\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\r\n    productTable: {\r\n        '& small': {\r\n            height: 15,\r\n            width: 50,\r\n            borderRadius: 500,\r\n            boxShadow:\r\n                '0 0 2px 0 rgba(0, 0, 0, 0.12), 0 2px 2px 0 rgba(0, 0, 0, 0.24)',\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-child': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    },\r\n}))\r\n\r\nconst TopSellingTable = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Card elevation={3} className=\"pt-5 mb-6\">\r\n            <div className=\"flex justify-between items-center px-6 mb-3\">\r\n                <span className=\"card-title\">top selling products</span>\r\n                <Select size=\"small\" defaultValue=\"this_month\" disableUnderline>\r\n                    <MenuItem value=\"this_month\">This Month</MenuItem>\r\n                    <MenuItem value=\"last_month\">Last Month</MenuItem>\r\n                </Select>\r\n            </div>\r\n            <div className=\"overflow-auto\">\r\n                <Table\r\n                    className={clsx(\r\n                        'whitespace-pre min-w-400',\r\n                        classes.productTable\r\n                    )}\r\n                >\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className=\"px-6\" colSpan={4}>\r\n                                Name\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={2}>\r\n                                Revenue\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={2}>\r\n                                Stock Status\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={1}>\r\n                                Action\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {productList.map((product, index) => (\r\n                            <TableRow key={index} hover>\r\n                                <TableCell\r\n                                    className=\"px-0 capitalize\"\r\n                                    colSpan={4}\r\n                                    align=\"left\"\r\n                                >\r\n                                    <div className=\"flex items-center\">\r\n                                        <Avatar src={product.imgUrl} />\r\n                                        <p className=\"m-0 ml-8\">\r\n                                            {product.name}\r\n                                        </p>\r\n                                    </div>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    className=\"px-0 capitalize\"\r\n                                    align=\"left\"\r\n                                    colSpan={2}\r\n                                >\r\n                                    $\r\n                                    {product.price > 999\r\n                                        ? (product.price / 1000).toFixed(1) +\r\n                                          'k'\r\n                                        : product.price}\r\n                                </TableCell>\r\n\r\n                                <TableCell\r\n                                    className=\"px-0\"\r\n                                    align=\"left\"\r\n                                    colSpan={2}\r\n                                >\r\n                                    {product.available ? (\r\n                                        product.available < 20 ? (\r\n                                            <small className=\"border-radius-4 bg-secondary text-white px-2 py-2px\">\r\n                                                {product.available} available\r\n                                            </small>\r\n                                        ) : (\r\n                                            <small className=\"border-radius-4 bg-primary text-white px-2 py-2px\">\r\n                                                in stock\r\n                                            </small>\r\n                                        )\r\n                                    ) : (\r\n                                        <small className=\"border-radius-4 bg-error text-white px-2 py-2px\">\r\n                                            out of stock\r\n                                        </small>\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell className=\"px-0\" colSpan={1}>\r\n                                    <IconButton>\r\n                                        <Icon color=\"primary\">edit</Icon>\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n        </Card>\r\n    )\r\n}*/\r\nimport React, { useEffect, useState} from 'react'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport {connect} from 'react-redux'\r\nimport { fetchClients, SELECT_CLIENT } from 'app/redux/actions/ClientActions'\r\nimport { SELECT_PROCESS } from 'app/redux/actions/ProcessActions';\r\nimport MatxProgressBar from 'app/components/MatxProgressBar/MatxProgressBar';\r\nconst columns = [\r\n  {\r\n    field: 'name',\r\n    headerName: 'Name',\r\n    minWidth:150,\r\n    editable: true,\r\n  },\r\n  {\r\n    field: 'phone',\r\n    headerName: 'Phone',\r\n    type: 'number',\r\n    editable: true,\r\n    minWidth:150,\r\n  },\r\n  {\r\n    field: 'paied',\r\n    headerName: 'paied',\r\n    type: 'number',\r\n    minWidth:300,\r\n    flex:3,\r\n\r\n    renderCell: (params) =>{const v=((parseInt(`${params.getValue(params.id, 'paied')}`)/parseInt(`${params.getValue(params.id, 'total')}`))*100);return (<>\r\n    \r\n\r\n            <div style={{display: \"inline-block\"}}>{`${params.getValue(params.id, 'paied')+',00 /'}`+`${params.getValue(params.id, 'total')+',00 DA '}`}</div>\r\n            \r\n       \r\n         <MatxProgressBar \r\n                    value={v}\r\n                    color={v<80?\"secondary\":\"primary\"}\r\n                    text={v.toFixed(2)+'%'}\r\n                />\r\n        </>\r\n      )}\r\n  },\r\n  {\r\n    field: 'total',\r\n    headerName: 'Credit restent',\r\n    type: 'number',\r\n    editable: true,\r\n    minWidth:150,\r\n    valueFormatter: (params) =>\r\n    `${(parseInt(`${params.getValue(params.id, 'total')}`)-parseInt(`${params.getValue(params.id, 'paied')}`))+',00 DA'}`\r\n  },\r\n  {\r\n    field: 'delais',\r\n    headerName: 'delais',\r\n    type: 'date',\r\n    editable: true,\r\n    minWidth:150,\r\n    valueFormatter: (params) =>\r\n    `${new Date(params.getValue(params.id, 'delais')).toLocaleDateString()}`},\r\n];\r\n\r\n\r\n\r\nconst  DataTable = ({dispatch, loading, clients, hasErrors}) =>{\r\n    const [selected, setSelected]=useState(1)\r\n    useEffect(() => {\r\n        dispatch(fetchClients())\r\n      }, [dispatch])\r\n     const handleRowClick=(param,event)=>{\r\n         setSelected(param.id)\r\n         dispatch({type:SELECT_CLIENT,payload:param.id})\r\n         dispatch({type:SELECT_PROCESS,payload:null})\r\n\r\n      }\r\n  return (\r\n    <div style={{ height: 400, width: '100%' }}>\r\n        \r\n      <DataGrid \r\n      onRowClick={handleRowClick}\r\n        rows={clients||[]}\r\n        columns={columns}\r\n        pageSize={5}\r\n        checkboxSelection\r\n        selectionModel={selected}        \r\n        \r\n      />\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.clients.loading,\r\n    clients: state.clients.clients,\r\n    hasErrors: state.clients.hasErrors,\r\n  })\r\nexport default connect(mapStateToProps)(DataTable)\r\n\r\n\r\n\r\n/*const productList = [\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-2.jpg',\r\n        name: 'earphone',\r\n        price: 100,\r\n        available: 15,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-3.jpg',\r\n        name: 'earphone',\r\n        price: 1500,\r\n        available: 30,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/iphone-2.jpg',\r\n        name: 'iPhone x',\r\n        price: 1900,\r\n        available: 35,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/iphone-1.jpg',\r\n        name: 'iPhone x',\r\n        price: 100,\r\n        available: 0,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-3.jpg',\r\n        name: 'Head phone',\r\n        price: 1190,\r\n        available: 5,\r\n    },\r\n]\r\n\r\nexport default TopSellingTable*/\r\n","/*import React from 'react'\r\nimport {\r\n    Card,\r\n    Icon,\r\n    IconButton,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Avatar,\r\n    MenuItem,\r\n    Select,\r\n} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport clsx from 'clsx'\r\n\r\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\r\n    productTable: {\r\n        '& small': {\r\n            height: 15,\r\n            width: 50,\r\n            borderRadius: 500,\r\n            boxShadow:\r\n                '0 0 2px 0 rgba(0, 0, 0, 0.12), 0 2px 2px 0 rgba(0, 0, 0, 0.24)',\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-child': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    },\r\n}))\r\n\r\nconst TopSellingTable = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Card elevation={3} className=\"pt-5 mb-6\">\r\n            <div className=\"flex justify-between items-center px-6 mb-3\">\r\n                <span className=\"card-title\">top selling products</span>\r\n                <Select size=\"small\" defaultValue=\"this_month\" disableUnderline>\r\n                    <MenuItem value=\"this_month\">This Month</MenuItem>\r\n                    <MenuItem value=\"last_month\">Last Month</MenuItem>\r\n                </Select>\r\n            </div>\r\n            <div className=\"overflow-auto\">\r\n                <Table\r\n                    className={clsx(\r\n                        'whitespace-pre min-w-400',\r\n                        classes.productTable\r\n                    )}\r\n                >\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className=\"px-6\" colSpan={4}>\r\n                                Name\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={2}>\r\n                                Revenue\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={2}>\r\n                                Stock Status\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={1}>\r\n                                Action\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {productList.map((product, index) => (\r\n                            <TableRow key={index} hover>\r\n                                <TableCell\r\n                                    className=\"px-0 capitalize\"\r\n                                    colSpan={4}\r\n                                    align=\"left\"\r\n                                >\r\n                                    <div className=\"flex items-center\">\r\n                                        <Avatar src={product.imgUrl} />\r\n                                        <p className=\"m-0 ml-8\">\r\n                                            {product.name}\r\n                                        </p>\r\n                                    </div>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    className=\"px-0 capitalize\"\r\n                                    align=\"left\"\r\n                                    colSpan={2}\r\n                                >\r\n                                    $\r\n                                    {product.price > 999\r\n                                        ? (product.price / 1000).toFixed(1) +\r\n                                          'k'\r\n                                        : product.price}\r\n                                </TableCell>\r\n\r\n                                <TableCell\r\n                                    className=\"px-0\"\r\n                                    align=\"left\"\r\n                                    colSpan={2}\r\n                                >\r\n                                    {product.available ? (\r\n                                        product.available < 20 ? (\r\n                                            <small className=\"border-radius-4 bg-secondary text-white px-2 py-2px\">\r\n                                                {product.available} available\r\n                                            </small>\r\n                                        ) : (\r\n                                            <small className=\"border-radius-4 bg-primary text-white px-2 py-2px\">\r\n                                                in stock\r\n                                            </small>\r\n                                        )\r\n                                    ) : (\r\n                                        <small className=\"border-radius-4 bg-error text-white px-2 py-2px\">\r\n                                            out of stock\r\n                                        </small>\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell className=\"px-0\" colSpan={1}>\r\n                                    <IconButton>\r\n                                        <Icon color=\"primary\">edit</Icon>\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n        </Card>\r\n    )\r\n}*/\r\nimport React, {  useState} from 'react'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport {connect} from 'react-redux'\r\nimport AddPayment from 'app/views/material-kit/forms/AddPayment';\r\nimport { useEffect } from 'react';\r\nimport { getPayments } from 'app/redux/actions/PaymentActions';\r\nconst columns = [\r\n  { field: 'id', headerName: 'ID', width: 90 },\r\n  {\r\n    field: 'date',\r\n    headerName: 'date',\r\n    type: 'date',\r\n    flex: 1,\r\n    editable: true,\r\n    valueFormatter: (params) =>\r\n    `${new Date(params.getValue(params.id, 'date')).toLocaleDateString()}`\r\n  },\r\n \r\n  \r\n  {\r\n    field: 'amount',\r\n    headerName: 'Amount (somme)',\r\n    type: 'number',\r\n    flex: 1,\r\n    editable: true,    \r\n    valueFormatter: (params) =>\r\n    `${params.getValue(params.id, 'amount')+',00 /'}`+`${params.getValue(params.id, 'process_total')+',00 DA '}`\r\n  },\r\n  \r\n \r\n];\r\n\r\n\r\n\r\nconst  DataTablePayments = ({dispatch, loading, processes, hasErrors,selectedprocess,payments}) =>{\r\n    const [selected, setSelected]=useState(1)\r\n    useEffect(() => {\r\n        dispatch(getPayments(processes&&processes.filter((e)=>e.id==selectedprocess)[0]&&processes.filter((e)=>e.id==selectedprocess)[0].payments||[]))\r\n      }, [dispatch])\r\n  return (<>\r\n   \r\n    <div style={{ height: 400, width: '100%' }}>\r\n        \r\n      <DataGrid \r\n        rows={payments||[]}\r\n        columns={columns}\r\n        pageSize={5}\r\n        checkboxSelection\r\n        selectionModel={selected}        \r\n        \r\n      />\r\n    </div>\r\n    <div>  <AddPayment /></div> \r\n    </>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.processes.loading,\r\n    selectedprocess: state.processes.selected,\r\n    hasErrors: state.processes.hasErrors,\r\n    processes:state.processes.processes,\r\n    payments:state.payments.payments,})\r\n\r\nexport default connect(mapStateToProps)(DataTablePayments)\r\n\r\n\r\n\r\n/*const productList = [\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-2.jpg',\r\n        name: 'earphone',\r\n        price: 100,\r\n        available: 15,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-3.jpg',\r\n        name: 'earphone',\r\n        price: 1500,\r\n        available: 30,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/iphone-2.jpg',\r\n        name: 'iPhone x',\r\n        price: 1900,\r\n        available: 35,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/iphone-1.jpg',\r\n        name: 'iPhone x',\r\n        price: 100,\r\n        available: 0,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-3.jpg',\r\n        name: 'Head phone',\r\n        price: 1190,\r\n        available: 5,\r\n    },\r\n]\r\n\r\nexport default TopSellingTable*/\r\n","/*import React from 'react'\r\nimport {\r\n    Card,\r\n    Icon,\r\n    IconButton,\r\n    Table,\r\n    TableHead,\r\n    TableRow,\r\n    TableCell,\r\n    TableBody,\r\n    Avatar,\r\n    MenuItem,\r\n    Select,\r\n} from '@material-ui/core'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport clsx from 'clsx'\r\n\r\nconst useStyles = makeStyles(({ palette, ...theme }) => ({\r\n    productTable: {\r\n        '& small': {\r\n            height: 15,\r\n            width: 50,\r\n            borderRadius: 500,\r\n            boxShadow:\r\n                '0 0 2px 0 rgba(0, 0, 0, 0.12), 0 2px 2px 0 rgba(0, 0, 0, 0.24)',\r\n        },\r\n        '& td': {\r\n            borderBottom: 'none',\r\n        },\r\n        '& td:first-child': {\r\n            paddingLeft: '16px !important',\r\n        },\r\n    },\r\n}))\r\n\r\nconst TopSellingTable = () => {\r\n    const classes = useStyles()\r\n\r\n    return (\r\n        <Card elevation={3} className=\"pt-5 mb-6\">\r\n            <div className=\"flex justify-between items-center px-6 mb-3\">\r\n                <span className=\"card-title\">top selling products</span>\r\n                <Select size=\"small\" defaultValue=\"this_month\" disableUnderline>\r\n                    <MenuItem value=\"this_month\">This Month</MenuItem>\r\n                    <MenuItem value=\"last_month\">Last Month</MenuItem>\r\n                </Select>\r\n            </div>\r\n            <div className=\"overflow-auto\">\r\n                <Table\r\n                    className={clsx(\r\n                        'whitespace-pre min-w-400',\r\n                        classes.productTable\r\n                    )}\r\n                >\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell className=\"px-6\" colSpan={4}>\r\n                                Name\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={2}>\r\n                                Revenue\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={2}>\r\n                                Stock Status\r\n                            </TableCell>\r\n                            <TableCell className=\"px-0\" colSpan={1}>\r\n                                Action\r\n                            </TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {productList.map((product, index) => (\r\n                            <TableRow key={index} hover>\r\n                                <TableCell\r\n                                    className=\"px-0 capitalize\"\r\n                                    colSpan={4}\r\n                                    align=\"left\"\r\n                                >\r\n                                    <div className=\"flex items-center\">\r\n                                        <Avatar src={product.imgUrl} />\r\n                                        <p className=\"m-0 ml-8\">\r\n                                            {product.name}\r\n                                        </p>\r\n                                    </div>\r\n                                </TableCell>\r\n                                <TableCell\r\n                                    className=\"px-0 capitalize\"\r\n                                    align=\"left\"\r\n                                    colSpan={2}\r\n                                >\r\n                                    $\r\n                                    {product.price > 999\r\n                                        ? (product.price / 1000).toFixed(1) +\r\n                                          'k'\r\n                                        : product.price}\r\n                                </TableCell>\r\n\r\n                                <TableCell\r\n                                    className=\"px-0\"\r\n                                    align=\"left\"\r\n                                    colSpan={2}\r\n                                >\r\n                                    {product.available ? (\r\n                                        product.available < 20 ? (\r\n                                            <small className=\"border-radius-4 bg-secondary text-white px-2 py-2px\">\r\n                                                {product.available} available\r\n                                            </small>\r\n                                        ) : (\r\n                                            <small className=\"border-radius-4 bg-primary text-white px-2 py-2px\">\r\n                                                in stock\r\n                                            </small>\r\n                                        )\r\n                                    ) : (\r\n                                        <small className=\"border-radius-4 bg-error text-white px-2 py-2px\">\r\n                                            out of stock\r\n                                        </small>\r\n                                    )}\r\n                                </TableCell>\r\n                                <TableCell className=\"px-0\" colSpan={1}>\r\n                                    <IconButton>\r\n                                        <Icon color=\"primary\">edit</Icon>\r\n                                    </IconButton>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </div>\r\n        </Card>\r\n    )\r\n}*/\r\nimport React, {  useState} from 'react'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport {connect} from 'react-redux'\r\nimport { Button,   } from '@material-ui/core';\r\nimport SimpleDialogDemo from 'app/views/material-kit/dialog/SimpleDialog';\r\nconst columns = [\r\n  {\r\n    field: 'stock_name',\r\n    headerName: 'Mark (stock_name)',\r\n    flex: 1,\r\n    valueFormatter: (params) =>\r\n    `${params.getValue(params.id, 'brand_name')}`+'-'+`${params.getValue(params.id, 'stock_name')}`\r\n\r\n  },\r\n  {\r\n    field: 'quantity',\r\n    headerName: 'quantity',\r\n    type: 'number',\r\n    flex: 0.7,\r\n\r\n    editable: true,    \r\n  },\r\n\r\n  {\r\n    field: 'item_sale_price_final',\r\n    headerName: 'prix unitare final',\r\n    type: 'number',\r\n    flex: 1,\r\n\r\n    editable: true,\r\n    valueFormatter: (params) =>\r\n    `${params.getValue(params.id, 'prix_final')+',00 DA'}`\r\n  },\r\n  {\r\n    field: 'total',\r\n    headerName: 'Total',\r\n    sortable: false,\r\n    flex: 0.6,\r\n\r\n    valueFormatter: (params) =>\r\n    parseInt(`${params.getValue(params.id, 'prix_final')}`)*parseInt(`${\r\n        params.getValue(params.id, 'quantity')}`) + ',00 DA',\r\n    \r\n        \r\n    },\r\n    \r\n  {\r\n    field: 'Restore',\r\n    headerName: 'Restore',\r\n    type: 'button',\r\n    flex: 0.5,\r\n\r\n    editable: true,\r\n    renderCell: (params) => (\r\n        <strong>\r\n          <Button\r\n            variant=\"contained\"\r\n            onClick={handleClick}\r\n            color=\"primary\"\r\n            size=\"small\"\r\n            style={{ marginLeft: 16 }}\r\n          >\r\n            Restore\r\n          </Button>\r\n        </strong>\r\n      ),\r\n  },\r\n];\r\nconst handleClick = ()=>{\r\n\r\n\r\n}\r\n\r\n\r\n\r\nconst  DataTableBaskets = ({dispatch, loading, processes, hasErrors,selectedprocess}) =>{\r\n    const [selected, setSelected]=useState(1)\r\n  return (\r\n    <div style={{ height: 400, width: '100%' }}>\r\n        \r\n      <DataGrid \r\n        rows={processes.filter((e)=>e.id==selectedprocess)[0]&&processes.filter((e)=>e.id==selectedprocess)[0].baskets||[]}\r\n        columns={columns}\r\n        pageSize={5}\r\n        selectionModel={selected}        \r\n        \r\n      />\r\n      <SimpleDialogDemo open={true} >dd</SimpleDialogDemo>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.processes.loading,\r\n    selectedprocess: state.processes.selected,\r\n    hasErrors: state.processes.hasErrors,\r\n    processes:state.processes.processes})\r\n\r\nexport default connect(mapStateToProps)(DataTableBaskets)\r\n\r\n\r\n\r\n/*const productList = [\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-2.jpg',\r\n        name: 'earphone',\r\n        price: 100,\r\n        available: 15,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-3.jpg',\r\n        name: 'earphone',\r\n        price: 1500,\r\n        available: 30,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/iphone-2.jpg',\r\n        name: 'iPhone x',\r\n        price: 1900,\r\n        available: 35,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/iphone-1.jpg',\r\n        name: 'iPhone x',\r\n        price: 100,\r\n        available: 0,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-3.jpg',\r\n        name: 'Head phone',\r\n        price: 1190,\r\n        available: 5,\r\n    },\r\n]\r\n\r\nexport default TopSellingTable*/\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport SwipeableViews from 'react-swipeable-views';\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Tabs from '@material-ui/core/Tabs';\r\nimport Tab from '@material-ui/core/Tab';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport DataTable from './shared/DataTable';\r\nimport DataTablePayments from './shared/DataTablePayments';\r\nimport DataTableBaskets from './shared/DataTableBaskets';\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    'aria-controls': `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nexport default function FullWidthTabs() {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  const handleChangeIndex = (index) => {\r\n    setValue(index);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"fullWidth\"\r\n          aria-label=\"full width tabs example\"\r\n        >\r\n          <Tab label=\"baskets\" {...a11yProps(0)} />\r\n          <Tab label=\"payments\" {...a11yProps(1)} />\r\n          <Tab label=\"restores\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <SwipeableViews\r\n        axis={theme.direction === 'rtl' ? 'x-reverse' : 'x'}\r\n        index={value}\r\n        onChangeIndex={handleChangeIndex}\r\n      >\r\n        <TabPanel value={value} index={0} dir={theme.direction}>\r\n        <DataTableBaskets/>        \r\n                </TabPanel>\r\n        <TabPanel value={value} index={1} dir={theme.direction}>\r\n        <DataTablePayments/>\r\n        </TabPanel>\r\n      </SwipeableViews>\r\n    </div>\r\n  );\r\n\r\n}\r\n\r\n","import React, { useEffect, useState} from 'react'\r\nimport { DataGrid } from '@material-ui/data-grid';\r\nimport {connect} from 'react-redux'\r\nimport { fetchProcesses, SELECT_PROCESS } from 'app/redux/actions/ProcessActions';\r\nimport { getPayments } from 'app/redux/actions/PaymentActions';\r\nconst columns = [\r\n  { field: 'id', headerName: 'ID', width: 90 },\r\n  {\r\n    field: 'name',\r\n    headerName: \"Operation d'achat\",\r\n    flex: 1,\r\n    minWidth:150,\r\n\r\n    editable: true,\r\n  },\r\n  {\r\n    field: 'total',\r\n    headerName: 'payée/Total',\r\n    type: 'number',\r\n    flex: 1,\r\n    editable: true,\r\n    minWidth:200,\r\n\r\n    valueFormatter: (params) =>\r\n    `${params.getValue(params.id, 'paied')+',00 /'}`+`${params.getValue(params.id, 'total')+',00 DA '}`\r\n  },\r\n  \r\n  {\r\n    field: 'date',\r\n    headerName: 'date',\r\n    type: 'date',\r\n    flex: 1,\r\n    editable: true,\r\n    minWidth:150,\r\n\r\n    valueFormatter: (params) =>\r\n    `${new Date(params.getValue(params.id, 'date')).toLocaleDateString()}`\r\n  },\r\n];\r\n\r\n\r\n\r\nconst  DataTableProcesses = ({dispatch, loading, selectedclient, hasErrors,processes}) =>{\r\n    const [selected, setSelected]=useState(1)\r\n    useEffect(() => {\r\n        dispatch(fetchProcesses())\r\n        dispatch({type:SELECT_PROCESS,payload:null})\r\n      }, [dispatch])\r\n     const handleRowClick=(param,event)=>{\r\n         setSelected(param.id)\r\n         dispatch({type:SELECT_PROCESS,payload:param.id})\r\n         dispatch(getPayments(processes&&processes.filter((e)=>e.id==param.id)[0]&&processes.filter((e)=>e.id==param.id)[0].payments||[]))\r\n\r\n      }\r\n  return (\r\n    <div style={{ height: 400, width: '100%' }}>\r\n        \r\n      <DataGrid \r\n      onRowClick={handleRowClick}\r\n        rows={processes.filter((e)=>{return e.client_id==selectedclient})||[]}\r\n        columns={columns}\r\n        pageSize={5}\r\n        checkboxSelection\r\n        selectionModel={selected}        \r\n        \r\n      />\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    loading: state.processes.loading,\r\n    selectedclient: state.clients.selected,\r\n    hasErrors: state.processes.hasErrors,\r\n    processes:state.processes.processes\r\n  })\r\nexport default connect(mapStateToProps)(DataTableProcesses)\r\n\r\n\r\n\r\n/*const productList = [\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-2.jpg',\r\n        name: 'earphone',\r\n        price: 100,\r\n        available: 15,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-3.jpg',\r\n        name: 'earphone',\r\n        price: 1500,\r\n        available: 30,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/iphone-2.jpg',\r\n        name: 'iPhone x',\r\n        price: 1900,\r\n        available: 35,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/iphone-1.jpg',\r\n        name: 'iPhone x',\r\n        price: 100,\r\n        available: 0,\r\n    },\r\n    {\r\n        imgUrl: '/assets/images/products/headphone-3.jpg',\r\n        name: 'Head phone',\r\n        price: 1190,\r\n        available: 5,\r\n    },\r\n]\r\n\r\nexport default TopSellingTable*/\r\n","import React, { Fragment } from 'react'\r\nimport { Grid, Card } from '@material-ui/core'\r\nimport DoughnutChart from './shared/Doughnut'\r\nimport Campaigns from './shared/Campaigns'\r\nimport { useTheme } from '@material-ui/styles'\r\nimport DataTable from './shared/DataTable'\r\nimport SimpleForm from '../material-kit/forms/SimpleForm'\r\nimport FullWidthTabs from './FullWidthTabs'\r\nimport DataTableProcesses from './shared/DataTableProcesses'\r\nconst Clients = ({ dispatch, loading, clients, hasErrors }) => {\r\n    const theme = useTheme()\r\n\r\n    return (\r\n        <Fragment>\r\n                        <addPaymentSnackbar/>\r\n\r\n            <div className=\"analytics m-sm-30 mt-6\">\r\n                <Grid container spacing={3} xs={24}>\r\n                    <Grid item lg={8} md={8} sm={12} xs={12}>\r\n                        <>\r\n                            <Card className=\"px-6 py-4 mb-6\">\r\n                            <div className=\"card-title\">Ajouter Client</div>\r\n                            <SimpleForm />\r\n                            </Card>\r\n\r\n                            {/* Top Selling Products */}\r\n                            <Card className=\"px-6 py-4 mb-6\">\r\n                                <div className=\"card-title\">List Clients</div>\r\n                                <DataTable />\r\n                            </Card>\r\n                            <Card className=\"px-6 py-4 mb-6 bg-light-green\">\r\n                                <div className=\"card-title\">List Processes</div>\r\n                                <DataTableProcesses />\r\n                            </Card>\r\n                            <Card className=\"px-6 py-4 mb-6 \">\r\n                                <FullWidthTabs />\r\n                            </Card>\r\n                        </>\r\n                    </Grid>\r\n\r\n                    <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                        <Card >\r\n                            <DoughnutChart\r\n                                height=\"300px\"\r\n                                color={[\r\n                                    theme.palette.primary.dark,\r\n                                    theme.palette.primary.main,\r\n                                    theme.palette.primary.light,\r\n                                ]}\r\n                            />\r\n                        </Card>\r\n\r\n\r\n                        <Campaigns />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\nexport default Clients\r\n\r\n/*import React, {useEffect} from 'react'\r\n\r\nimport {fetchClients} from '../actions/clientsActions'\r\nimport {Client} from '../components/Client'\r\n\r\nconst ClientsPage = ({dispatch, loading, clients, hasErrors}) => {\r\n  useEffect(() => {\r\n    dispatch(fetchClients())\r\n  }, [dispatch])\r\n\r\n  // Show loading, error, or success state\r\n  const renderClients = () => {\r\n    if (loading) return <p>Loading clients...</p>\r\n    if (hasErrors) return <p>Unable to display clients.</p>\r\n    return clients.map((client) => <Client key={client.id} client={client} />)\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h1>Clients</h1>\r\n      {renderClients()}\r\n    </section>\r\n  )\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  loading: state.clients.loading,\r\n  clients: state.clients.clients,\r\n  hasErrors: state.clients.hasErrors,\r\n})\r\n\r\nexport default connect(mapStateToProps)(ClientsPage)*/\r\n"],"sourceRoot":""}
{"version":3,"sources":["../node_modules/@material-ui/core/esm/DialogContent/DialogContent.js","../node_modules/@material-ui/core/esm/DialogContentText/DialogContentText.js","../node_modules/@material-ui/core/esm/DialogActions/DialogActions.js","cloth/shue.jpg","app/views/Operation/shared/Doughnut.jsx","app/views/Operation/shared/Campaigns.jsx","app/views/Operation/DigitalNumber.jsx","app/views/Operation/ProcessSnackbar.jsx","app/views/Operation/Operation.jsx"],"names":["DialogContent","React","props","ref","classes","className","_props$dividers","dividers","other","_objectWithoutProperties","_extends","clsx","root","withStyles","theme","flex","WebkitOverflowScrolling","overflowY","padding","paddingTop","borderTop","concat","palette","divider","borderBottom","name","DialogContentText","Typography","component","variant","color","marginBottom","DialogActions","_props$disableSpacing","disableSpacing","spacing","display","alignItems","justifyContent","marginLeft","DoughnutChart","height","makeStyles","cardHolder","background","img","backgroundSize","backgroundRepeat","card","maxWidth","borderRadius","margin","opacity","buttonProgress","position","top","left","marginTop","useStyles","useTheme","option","legend","show","itemGap","icon","bottom","textStyle","text","secondary","fontSize","fontFamily","tooltip","trigger","formatter","xAxis","axisLine","splitLine","yAxis","series","type","radius","center","avoidLabelOverlap","hoverOffset","stillShowZeroSum","label","normal","emphasis","fontWeight","labelLine","data","value","itemStyle","shadowBlur","shadowOffsetX","shadowColor","style","Campaigns","title","DigitalNumber","nums","width","unActiveColor","backgroundColor","transition","number","active","lineArray","numsArray","split","filter","item","test","isActive","num","lineIndex","find","includes","map","index","xmlns","viewBox","xmlnsXlink","points","fill","line","variantIcon","success","CheckCircleIcon","warning","WarningIcon","error","ErrorIcon","info","InfoIcon","useStyles1","green","dark","primary","main","amber","iconVariant","marginRight","message","MySnackbarContentWrapper","onClose","Icon","SnackbarContent","id","action","IconButton","onClick","connect","state","hasErrors","processes","dispatch","handleClose","event","reason","CLOSE_STOCK_SNACKBAR","window","location","reload","Snackbar","anchorOrigin","vertical","horizontal","open","autoHideDuration","clients","loading","brands","stocks","useState","total","setTotal","payment","setPayment","setOpen","date","payments","baskets","client_id","paied","op","setOp","useEffect","fetchClients","fetchCBS","setValue","value1","setValue1","value2","setValue2","selectedStocks","setSelectedStocks","rows","setRows","handleSubmit","addProcess","console","log","mystyle","align_items","columns","field","headerName","minwidth","editable","valueFormatter","params","getValue","renderCell","Button","handleDelete","size","editRowsModel","setEditRowsModel","e","parseInt","row","prix_final","quantity","Grid","container","xs","lg","md","sm","Card","Autocomplete","onChange","newValue","options","getOptionLabel","renderInput","TextField","placeholder","pageSize","onEditRowsModelChange","model","Object","keys","newrow","new_quantity","new_prix","t","newTotal","newrows","blurOnSelect","clearOnBlur","filterSelectedOptions","re","brand_id","instock","defaultValue","item_sale_price","rowItem","brand_name","b","forEach","Input","textAlign","target","Dialog","DialogTitle","autoFocus","Doughnut","light","transform"],"mappings":"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","file":"static/js/26.778fe6a1.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = function styles(theme) {\n  return {\n    /* Styles applied to the root element. */\n    root: {\n      flex: '1 1 auto',\n      WebkitOverflowScrolling: 'touch',\n      // Add iOS momentum scrolling.\n      overflowY: 'auto',\n      padding: '8px 24px',\n      '&:first-child': {\n        // dialog without title\n        paddingTop: 20\n      }\n    },\n\n    /* Styles applied to the root element if `dividers={true}`. */\n    dividers: {\n      padding: '16px 24px',\n      borderTop: \"1px solid \".concat(theme.palette.divider),\n      borderBottom: \"1px solid \".concat(theme.palette.divider)\n    }\n  };\n};\nvar DialogContent = /*#__PURE__*/React.forwardRef(function DialogContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$dividers = props.dividers,\n      dividers = _props$dividers === void 0 ? false : _props$dividers,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"dividers\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, dividers && classes.dividers),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * Display the top and bottom dividers.\n   */\n  dividers: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContent'\n})(DialogContent);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    marginBottom: 12\n  }\n};\nvar DialogContentText = /*#__PURE__*/React.forwardRef(function DialogContentText(props, ref) {\n  return /*#__PURE__*/React.createElement(Typography, _extends({\n    component: \"p\",\n    variant: \"body1\",\n    color: \"textSecondary\",\n    ref: ref\n  }, props));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogContentText.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogContentText'\n})(DialogContentText);","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: 8,\n    justifyContent: 'flex-end',\n    flex: '0 0 auto'\n  },\n\n  /* Styles applied to the root element if `disableSpacing={false}`. */\n  spacing: {\n    '& > :not(:first-child)': {\n      marginLeft: 8\n    }\n  }\n};\nvar DialogActions = /*#__PURE__*/React.forwardRef(function DialogActions(props, ref) {\n  var _props$disableSpacing = props.disableSpacing,\n      disableSpacing = _props$disableSpacing === void 0 ? false : _props$disableSpacing,\n      classes = props.classes,\n      className = props.className,\n      other = _objectWithoutProperties(props, [\"disableSpacing\", \"classes\", \"className\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className, !disableSpacing && classes.spacing),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogActions.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the actions do not have additional margin.\n   */\n  disableSpacing: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogActions'\n})(DialogActions);","export default __webpack_public_path__ + \"static/media/shue.0d001a2d.jpg\";","import React from 'react'\r\nimport ReactEcharts from 'echarts-for-react'\r\nimport { makeStyles, useTheme } from '@material-ui/styles'\r\nimport { Card } from '@material-ui/core'\r\nimport img from '../../../../cloth/shue.jpg'\r\n\r\n\r\nconst DoughnutChart = ({ height, color = [] }) => {\r\n    const useStyles = makeStyles(({ palette, ...theme }) => ({\r\n        cardHolder: {\r\n            background: `url(${img})`,\r\n            backgroundSize:'100% auto',\r\n            backgroundRepeat:'no-repeat'\r\n\r\n        },\r\n        card: {\r\n            maxWidth: 800,\r\n            borderRadius: 12,\r\n            margin: '1rem',\r\n            opacity:'0.8',\r\n        },\r\n        buttonProgress: {\r\n            position: 'absolute',\r\n            top: '50%',\r\n            left: '50%',\r\n            marginTop: -12,\r\n            marginLeft: -12,\r\n        },\r\n    }))\r\n    const classes=useStyles()\r\n    \r\n\r\n    \r\n    const theme = useTheme()\r\n\r\n    const option = {\r\n        legend: {\r\n            show: true,\r\n            itemGap: 20,\r\n            icon: 'circle',\r\n            bottom: 0,\r\n            textStyle: {\r\n                color: theme.palette.text.secondary,\r\n                fontSize: 13,\r\n                fontFamily: 'roboto',\r\n            },\r\n        },\r\n        tooltip: {\r\n            show: false,\r\n            trigger: 'item',\r\n            formatter: '{a} <br/>{b}: {c} ({d}%)',\r\n        },\r\n        xAxis: [\r\n            {\r\n                axisLine: {\r\n                    show: false,\r\n                },\r\n                splitLine: {\r\n                    show: false,\r\n                },\r\n            },\r\n        ],\r\n        yAxis: [\r\n            {\r\n                axisLine: {\r\n                    show: false,\r\n                },\r\n                splitLine: {\r\n                    show: false,\r\n                },\r\n            },\r\n        ],\r\n\r\n        series: [\r\n            {\r\n                name: 'Traffic Rate',\r\n                type: 'pie',\r\n                radius: ['45%', '72.55%'],\r\n                center: ['50%', '50%'],\r\n                avoidLabelOverlap: false,\r\n                hoverOffset: 5,\r\n                stillShowZeroSum: false,\r\n                label: {\r\n                    normal: {\r\n                        show: false,\r\n                        position: 'center', // shows the description data to center, turn off to show in right side\r\n                        textStyle: {\r\n                            color: theme.palette.text.secondary,\r\n                            fontSize: 13,\r\n                            fontFamily: 'roboto',\r\n                        },\r\n                        formatter: '{a}',\r\n                    },\r\n                    emphasis: {\r\n                        show: true,\r\n                        textStyle: {\r\n                            fontSize: '14',\r\n                            fontWeight: 'normal',\r\n                            // color: \"rgba(15, 21, 77, 1)\"\r\n                        },\r\n                        formatter: '{b} \\n{c} ({d}%)',\r\n                    },\r\n                },\r\n                labelLine: {\r\n                    normal: {\r\n                        show: false,\r\n                    },\r\n                },\r\n                data: [\r\n                    {\r\n                        value: 65,\r\n                        name: 'Google',\r\n                    },\r\n                    {\r\n                        value: 20,\r\n                        name: 'Facebook',\r\n                    },\r\n                    { value: 15, name: 'Others' },\r\n                ],\r\n                itemStyle: {\r\n                    emphasis: {\r\n                        shadowBlur: 10,\r\n                        shadowOffsetX: 0,\r\n                        shadowColor: 'rgba(0, 0, 0, 0.5)',\r\n                    },\r\n                },\r\n            },\r\n        ],\r\n    }\r\n\r\n    return (\r\n        <div style={{background: `url(${img})` ,backgroundSize:'100% auto',}}className={classes}>\r\n        <ReactEcharts\r\n\r\n            style={{ opacity:'0.1' }}\r\n            option={{\r\n                ...option,\r\n                color: [...color],\r\n            }}\r\n        /></div>\r\n    )\r\n\r\n}\r\n\r\nexport default DoughnutChart\r\n","import React from 'react'\r\nimport { SimpleCard, MatxProgressBar } from 'app/components'\r\n\r\nconst Campaigns = () => {\r\n    return (\r\n        <div>\r\n            <SimpleCard title=\"Campaigns\">\r\n                <small className=\"text-muted\">Today</small>\r\n                <div className=\"pt-2\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Google (102k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={45}\r\n                    color=\"secondary\"\r\n                    text=\"Twitter (40k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Tensor (80k)\"\r\n                />\r\n\r\n                <div className=\"py-3\" />\r\n                <small className=\"text-muted\">Yesterday</small>\r\n                <div className=\"pt-2\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Google (102k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={45}\r\n                    color=\"secondary\"\r\n                    text=\"Twitter (40k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Tensor (80k)\"\r\n                />\r\n\r\n                <div className=\"py-3\" />\r\n                <small className=\"text-muted\">Yesterday</small>\r\n                <div className=\"pt-2\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Google (102k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={45}\r\n                    color=\"secondary\"\r\n                    text=\"Twitter (40k)\"\r\n                />\r\n                <div className=\"py-1\" />\r\n                <MatxProgressBar\r\n                    value={75}\r\n                    color=\"primary\"\r\n                    text=\"Tensor (80k)\"\r\n                />\r\n            </SimpleCard>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Campaigns\r\n","import React from 'react'\r\n\r\n\r\n const DigitalNumber = ({\r\n  nums,\r\n  width = \"100%\",\r\n  height = \"200px\", // if you wanna auto use 100%\r\n  color = \"#FF0000\",\r\n  unActiveColor = \"#22221e\",\r\n  backgroundColor = \"#000\",\r\n  transition = \"none\"\r\n}) => {\r\n  const theme = [\r\n    {\r\n      color: \"#FF0000\",\r\n      unActiveColor: \"#22221e\",\r\n      backgroundColor: \"#000\"\r\n    },\r\n    {\r\n      color: \"#000\",\r\n      unActiveColor: \"#aaa\",\r\n      backgroundColor: \"#F17D13\"\r\n    },\r\n    {\r\n      color: \"#0078D7\",\r\n      unActiveColor: \"#AAD1F0\",\r\n      backgroundColor: \"#DD4F43\"\r\n    },\r\n    {\r\n      color: \"#F17D13\",\r\n      unActiveColor: \"#FCD8B9\",\r\n      backgroundColor: \"#92E78C\"\r\n    }\r\n  ];\r\n  const number = [\r\n    {\r\n      value: 0,\r\n      active: [0, 1, 2, 4, 5, 6]\r\n    },\r\n    {\r\n      value: 1,\r\n      active: [2, 6]\r\n    },\r\n    {\r\n      value: 2,\r\n      active: [1, 2, 3, 4, 5]\r\n    },\r\n    {\r\n      value: 3,\r\n      active: [1, 2, 3, 5, 6]\r\n    },\r\n    {\r\n      value: 4,\r\n      active: [0, 2, 3, 6]\r\n    },\r\n    {\r\n      value: 5,\r\n      active: [0, 1, 3, 5, 6]\r\n    },\r\n    {\r\n      value: 6,\r\n      active: [0, 1, 3, 4, 5, 6]\r\n    },\r\n    {\r\n      value: 7,\r\n      active: [1, 2, 6]\r\n    },\r\n    {\r\n      value: 8,\r\n      active: [0, 1, 2, 3, 4, 5, 6]\r\n    },\r\n    {\r\n      value: 9,\r\n      active: [0, 1, 2, 3, 5, 6]\r\n    },\r\n    {\r\n      value: \"-\",\r\n      active: [3]\r\n    }\r\n  ];\r\n  const lineArray = [\r\n    \"40,80 60,60 80,80 80,160 60,180 40,160\",\r\n    \"63,57 83,37 147,37 167,57 147,77 83,77\",\r\n    \"150,80 170,60 190,80 190,160 170,180 150,160\",\r\n    \"63,183 83,163 147,163 167,183 147,204 83,204\",\r\n    \"40,206 60,187 80,207 80,287  60,307 40,287\",\r\n    \"63,310 83,290 147,290 167,310 147,330 83,330\",\r\n    \"150,206 169,187 190,207 190,287  170,307 150,287\"\r\n  ];\r\n  let numsArray = nums ? nums.split(\"\") : [0];\r\n  numsArray = numsArray.filter((item) => {\r\n    return /[0-9.-]/g.test(`${item}`);\r\n  });\r\n  const isActive = (num, lineIndex) => {\r\n    const activeNum = number.find((item) => {\r\n      return `${num}` === `${item.value}`;\r\n    });\r\n    return activeNum.active.includes(lineIndex);\r\n  };\r\n  return (\r\n    <div\r\n      style={{\r\n        background: backgroundColor,\r\n        display: \"flex\",\r\n        width: width,\r\n        height: height,\r\n        transition: transition ? transition : \"none\"\r\n      }}\r\n    >\r\n      {numsArray.map((item, index) => {\r\n        if (item === \".\") {\r\n          return (\r\n            <svg\r\n              /* eslint-disable-next-line react/no-array-index-key */\r\n              key={`${item}-${index}`}\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              viewBox=\"0 0 228 376\"\r\n              width=\"40%\"\r\n              height=\"100%\"\r\n              xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n            >\r\n              <g>\r\n                <polygon\r\n                  points=\"80,500 80,420 160,420 160,500\"\r\n                  style={{ fill: color }}\r\n                />\r\n              </g>\r\n            </svg>\r\n          );\r\n        }\r\n        return (\r\n          <svg\r\n            key={`${item}-${index}`}\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n            viewBox=\"0 0 228 376\"\r\n            width=\"100%\"\r\n            height=\"100%\"\r\n            xmlnsXlink=\"http://www.w3.org/1999/xlink\"\r\n          >\r\n            <g>\r\n              {lineArray.map((line, lineIndex) => {\r\n                return (\r\n                  <polygon\r\n                    key={line}\r\n                    points={line}\r\n                    style={{\r\n                      fill: isActive(item, lineIndex) ? color : unActiveColor\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n            </g>\r\n          </svg>\r\n        );\r\n      })}\r\n    </div>\r\n  )\r\n}\r\nexport default DigitalNumber\r\n\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport clsx from 'clsx'\r\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\r\nimport ErrorIcon from '@material-ui/icons/Error'\r\nimport InfoIcon from '@material-ui/icons/Info'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport { amber, green } from '@material-ui/core/colors'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport SnackbarContent from '@material-ui/core/SnackbarContent'\r\nimport WarningIcon from '@material-ui/icons/Warning'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport { connect } from 'react-redux'\r\nimport { CLOSE_STOCK_SNACKBAR } from 'app/redux/actions/ProcessActions'\r\n\r\n\r\n\r\nconst variantIcon = {\r\n    success: CheckCircleIcon,\r\n    warning: WarningIcon,\r\n    error: ErrorIcon,\r\n    info: InfoIcon,\r\n}\r\n\r\nconst useStyles1 = makeStyles((theme) => ({\r\n    success: {\r\n        backgroundColor: green[600],\r\n    },\r\n    error: {\r\n        backgroundColor: theme.palette.error.dark,\r\n    },\r\n    info: {\r\n        backgroundColor: theme.palette.primary.main,\r\n    },\r\n    warning: {\r\n        backgroundColor: amber[700],\r\n    },\r\n    icon: {\r\n        fontSize: 20,\r\n    },\r\n    iconVariant: {\r\n        opacity: 0.9,\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    message: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n    },\r\n}))\r\n\r\nfunction MySnackbarContentWrapper(props) {\r\n    const classes = useStyles1()\r\n    const { className, message, onClose, variant, ...other } = props\r\n    const Icon = variantIcon[variant]\r\n\r\n    return (\r\n        <SnackbarContent\r\n            className={clsx(classes[variant], className)}\r\n            aria-describedby=\"client-snackbar\"\r\n            message={\r\n                <span id=\"client-snackbar\" className={classes.message}>\r\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\r\n                    {message}\r\n                </span>\r\n            }\r\n            action={[\r\n                <IconButton\r\n                    key=\"close\"\r\n                    aria-label=\"Close\"\r\n                    color=\"inherit\"\r\n                    onClick={onClose}\r\n                >\r\n                    <CloseIcon className={classes.icon} />\r\n                </IconButton>,\r\n            ]}\r\n            {...other}\r\n        />\r\n    )\r\n}\r\n\r\nMySnackbarContentWrapper.propTypes = {\r\n    className: PropTypes.string,\r\n    message: PropTypes.node,\r\n    onClose: PropTypes.func,\r\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info'])\r\n        .isRequired,\r\n}\r\n\r\n\r\nconst ProcessSnackbar=({dispatch,success,hasErrors}) =>{\r\n    function handleClose(event, reason) {\r\n        if (reason === 'clickaway') {\r\n            return\r\n        }\r\n\r\n        dispatch({type:CLOSE_STOCK_SNACKBAR})//Todo case on failure must not reload\r\n        window.location.reload(); \r\n\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Snackbar\r\n                anchorOrigin={{\r\n                    vertical: 'bottom',\r\n                    horizontal: 'left',\r\n                }}\r\n                open={(success||hasErrors)}\r\n                autoHideDuration={1000}\r\n                onClose={handleClose}\r\n            >\r\n                <MySnackbarContentWrapper\r\n                    onClose={handleClose}\r\n                    variant={hasErrors?'error':'success'}\r\n                    message={hasErrors?'Process was not Successful':'Process Success'}\r\n                />\r\n            </Snackbar>\r\n        </div>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    hasErrors: state.processes.hasErrors,\r\n    success: state.processes.success,\r\n  })\r\nexport default connect(mapStateToProps)(ProcessSnackbar)\r\n\r\n","import React, { Fragment, useEffect } from 'react'\r\nimport { Grid, Card, TextField, Icon } from '@material-ui/core'\r\nimport DoughnutChart from './shared/Doughnut'\r\nimport Campaigns from './shared/Campaigns'\r\nimport { useTheme } from '@material-ui/styles'\r\nimport { Autocomplete } from '@material-ui/lab'\r\nimport { useState } from 'react'\r\nimport { fetchClients } from 'app/redux/actions/ClientActions'\r\nimport { connect } from 'react-redux'\r\nimport { fetchCBS } from 'app/redux/actions/StockActions'\r\nimport { DataGrid } from '@material-ui/data-grid'\r\nimport { Button } from '@material-ui/core'\r\nimport DigitalNumber from './DigitalNumber'\r\nimport { Input } from '@material-ui/core'\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { addProcess } from 'app/redux/actions/ProcessActions'\r\nimport ProcessSnackbar from './ProcessSnackbar'\r\n\r\nconst Operation = ({ dispatch, clients, brands, stocks }) => {\r\n    const [total, setTotal] = useState(0)\r\n    const [payment, setPayment] = useState(0)\r\n    const [open, setOpen] = useState(false)\r\n\r\n    const [op, setOp] = useState({\r\n        name: 'Op Achat',\r\n        date: null,\r\n        payments: [],\r\n        baskets: [],\r\n        client_id: 1,\r\n        paied:0,\r\n    })\r\n    useEffect(() => {\r\n        dispatch(fetchClients())\r\n        dispatch(fetchCBS())\r\n    }, [dispatch])\r\n    const [value, setValue] = useState(clients?clients[0]:[])\r\n    const [value1, setValue1] = useState([])\r\n    const [value2, setValue2] = useState([])\r\n    const [selectedStocks, setSelectedStocks] = useState([])\r\n    const theme = useTheme()\r\n\r\n    const top = [\r\n        { id: 9, title: 'The Shawshank Redemption', year: 1994 },\r\n        { id: 7, title: 'The Godfather', year: 1972 },\r\n        { id: 15, title: 'The Godfather: Part II', year: 1974 },\r\n        { id: 4, title: 'The Dark Knight', year: 2008 },\r\n        { id: 2, title: '12 Angry Men', year: 1957 },\r\n        { id: 99, title: \"Schindler's List\", year: 1993 },\r\n    ]\r\n    const [rows, setRows] = useState([])\r\n    const ha = (e) => {\r\n        setOp({ client_id: e?.id||1 })\r\n    }\r\n    const handleSubmit =()=>{\r\n        if(open){\r\n            const data ={client_id:op.client_id,date:null,paied:payment,total:total,name:null,baskets:[...rows]}\r\n            dispatch(addProcess(data))\r\n            console.log('data')\r\n            console.log(data)\r\n            setOpen(false)\r\n            dispatch(fetchCBS())\r\n            dispatch(fetchClients())\r\n\r\n\r\n        \r\n    }else{\r\n        setOpen(true)}\r\n    }\r\n    const mystyle = {\r\n        display: 'flex',\r\n        align_items: 'stretch',\r\n    }\r\n\r\n    const columns = [\r\n        {\r\n            field: 'brand_name',\r\n            headerName: 'Mark(Brand)',\r\n            flex: 1,\r\n            minwidth: 150,\r\n\r\n            editable: true,\r\n            valueFormatter: (params) =>\r\n                `${params.getValue(params.id, 'brand_name')}` + '-'+`${params.getValue(params.id, 'name')}`,\r\n        },\r\n        {\r\n            field: 'instock',\r\n            headerName: 'instock',\r\n            type: 'number',\r\n            flex: 0.6,\r\n            minwidth: 150,\r\n\r\n        },\r\n\r\n        {\r\n            field: 'item_sale_price', //item_sale_price\r\n            headerName: 'prix',\r\n            type: 'number',\r\n            flex: 0.8,\r\n            minwidth: 150,\r\n\r\n            valueFormatter: (params) =>\r\n                `${params.getValue(params.id, 'item_sale_price')}` + ',00 DA',\r\n        },\r\n\r\n        {\r\n            field: 'prix_final', //item_sale_price\r\n            headerName: 'prix _final',\r\n            type: 'number',\r\n            flex: 0.8,\r\n            editable: true,\r\n            minwidth: 150,\r\n\r\n            valueFormatter: (params) =>\r\n                `${params.getValue(params.id, 'prix_final')}` + ',00 DA',\r\n        },\r\n\r\n        {\r\n            field: 'quantity',\r\n            headerName: 'Quantity',\r\n            type: 'number',\r\n            flex: 0.6,\r\n            editable: true,\r\n            minwidth: 150,\r\n\r\n        },\r\n        {\r\n            field: 'delete',\r\n            headerName: 'delete',\r\n            type: 'button',\r\n            flex: 0.4,\r\n            editable: true,\r\n            minwidth: 150,\r\n\r\n            renderCell: (params) => (\r\n                <strong>\r\n                    <Button\r\n                        onClick={() => handleDelete(params)}\r\n                        color=\"primary\"\r\n                        size=\"small\"\r\n                    >\r\n                        <Icon>delete</Icon>\r\n                    </Button>\r\n                </strong>\r\n            ),\r\n        },\r\n    ]\r\n\r\n    const [editRowsModel, setEditRowsModel] = React.useState({})\r\n    const handleTotal = () => {\r\n        var t\r\n\r\n        rows.forEach((element) => {\r\n            console.log('elem')\r\n            console.log(element)\r\n            t =\r\n                parseInt(t) +\r\n                parseInt(element.prix_final) * parseInt(element.quantity)\r\n            console.log('t')\r\n            console.log(t.toString())\r\n            setTotal(t && t.toString())\r\n            setPayment(t && t.toString())\r\n        })\r\n    }\r\n    const handleAdd = (e) => {\r\n        if (value1?.item_sale_price && value2?.name) {\r\n            var rowItem = {\r\n                ...value1,\r\n                prix_final: value1.item_sale_price,\r\n                brand_name: value2.name,\r\n                quantity: 1,\r\n            }\r\n            var b = true\r\n\r\n            console.log('rrr')\r\n            console.log(rows)\r\n            rows.forEach((e) =>\r\n                e.id == rowItem.id ? (b = false) : console.log()\r\n            )\r\n\r\n            if (b) {\r\n                var newrows = [\r\n                    ...rows.filter((e) => e.id != rowItem.id),\r\n                    rowItem,\r\n                ]\r\n                console.log('value.item_sale_price')\r\n                console.log(value1.item_sale_price)\r\n                console.log('rowItem.quantity')\r\n                console.log(rowItem.quantity)\r\n                var t = total + value1.item_sale_price * rowItem.quantity\r\n                console.log('t')\r\n                console.log(parseInt(t))\r\n                setTotal(t)\r\n                setPayment(t)\r\n\r\n                console.log('newrows')\r\n                console.log(newrows)\r\n\r\n                setRows(newrows)\r\n                setValue1([])\r\n                setValue2([])\r\n                setSelectedStocks([])\r\n                console.log('rows add')\r\n                console.log(rows)\r\n            }\r\n        }\r\n    }\r\n    const handleDelete = (e) => {\r\n        console.log('e')\r\n        console.log(e)\r\n        setTotal(\r\n            +parseInt(total) -\r\n                parseInt(e.row.prix_final) * parseInt(e.row.quantity)\r\n        )\r\n        setPayment(\r\n            +parseInt(total) -\r\n                parseInt(e.row.prix_final) * parseInt(e.row.quantity)\r\n        )\r\n        setRows([...rows.filter((item) => item.id != e.id)])\r\n    }\r\n\r\n    const handleEditRowsModelChange = (model) => {\r\n        setEditRowsModel(model)\r\n\r\n        if (model && model != {}) {\r\n            let id = Object.keys(model)[0]\r\n           \r\n            if (id) {\r\n                let newrow = rows.find((e) => e.id == id)\r\n                console.log('newrow')\r\n                console.log(newrow)\r\n                if (newrow) {\r\n                    var new_quantity =\r\n                        model[id]['quantity']?.value || newrow.quantity\r\n                    var new_prix =\r\n                        model[id]['prix_final']?.value || newrow.prix_final\r\n\r\n                   \r\n                    let t = -1 * newrow.quantity * newrow.prix_final\r\n\r\n                    newrow.quantity = new_quantity\r\n                    newrow.prix_final = new_prix\r\n                    t = t + new_quantity * new_prix\r\n                    let newTotal = total + t\r\n                    setTotal(newTotal)\r\n                    setPayment(newTotal)\r\n\r\n                    let newrows = [...rows.filter((e) => e.id != id), newrow]\r\n                    setRows(newrows)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <addPaymentSnackbar />\r\n\r\n            <div className=\"analytics m-sm-30 mt-6\">\r\n                <Grid container spacing={3} xs={24}>\r\n                    <Grid item lg={8} md={8} sm={12} xs={12}>\r\n                        <>\r\n                            <Card className=\"px-6 py-4 mb-6\">\r\n                                <div className=\"card-title\">\r\n                                    Ajouter Operation\r\n                                </div>\r\n                                <Autocomplete\r\n                                    id=\"tags-standard\"\r\n                                    value={value}\r\n\r\n                                    onChange={(event, newValue) => {\r\n                                        setValue(newValue)\r\n                                        ha(newValue)\r\n                                    }}\r\n                                    options={clients}\r\n                                    getOptionLabel={(option) =>\r\n                                        option.name +\r\n                                        `:........................credit:` +\r\n                                        (parseInt(option.total) -\r\n                                            parseInt(option.paied)) +\r\n                                        ',00 DA'\r\n                                    }\r\n                                    // defaultValue={[]}\r\n                                    renderInput={(params) => (\r\n                                        <TextField\r\n                                            {...params}\r\n                                            variant=\"standard\"\r\n                                            label=\"Client\"\r\n                                            placeholder=\"\"\r\n                                        />\r\n                                    )}\r\n                                />\r\n                            </Card>\r\n\r\n                            {/* Top Selling Products */}\r\n                            <Card className=\"px-6 py-4 mb-6\">\r\n                                <div className=\"card-title\">\r\n                                    <div style={{ height: 400, width: '100%' }}>\r\n                                        <DataGrid\r\n                                            //onRowClick={}\r\n                                            rows={rows || []}\r\n                                            columns={columns}\r\n                                            pageSize={5}\r\n                                            // selectionModel={}\r\n                                            editRowsModel={editRowsModel}\r\n                                            onEditRowsModelChange={\r\n                                                handleEditRowsModelChange\r\n                                            }\r\n                                        />\r\n                                    </div>\r\n                                    Ajouter Produits\r\n                                </div>\r\n                                <div style={mystyle}>\r\n                                    <Autocomplete\r\n                                        style={{ flex: 4 }}\r\n                                        blurOnSelect\r\n                                        clearOnBlur\r\n                                        filterSelectedOptions\r\n                                        onChange={(event, newValue, re) => {\r\n                                            setValue2(newValue)\r\n                                            setSelectedStocks([\r\n                                                ...stocks.filter(\r\n                                                    (e) =>\r\n                                                        e.brand_id ==\r\n                                                            parseInt(\r\n                                                                newValue &&\r\n                                                                    newValue.id\r\n                                                            ) && e.instock > 0\r\n                                                ),\r\n                                            ])\r\n\r\n                                        \r\n                                        }}\r\n                                        id=\"tags-standard\"\r\n                                        value={value2}\r\n                                        options={brands}\r\n                                        getOptionLabel={(option) => option.name}\r\n                                        defaultValue={null}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                variant=\"standard\"\r\n                                                label=\"Mark(brand)\"\r\n                                                placeholder=\"\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                    <ProcessSnackbar/>\r\n                                    <Autocomplete\r\n                                        blurOnSelect\r\n                                        filterSelectedOptions\r\n                                        clearOnBlur\r\n                                        style={{ flex: 4 }}\r\n                                        id=\"tags-standard\"\r\n                                        value={value1}\r\n                                        onChange={(event, newValue) => {\r\n                                            newValue\r\n                                                ? setValue1(newValue)\r\n                                                : setValue1([])\r\n                                        }}\r\n                                        options={selectedStocks || []}\r\n                                        getOptionLabel={(option) =>\r\n                                            option.name\r\n                                                ? option.name +\r\n                                                  `:..........prix:` +\r\n                                                  option.item_sale_price +\r\n                                                  `,00DA` +\r\n                                                  `...... instock : ` +\r\n                                                  option.instock\r\n                                                : ''\r\n                                        }\r\n                                        defaultValue={null}\r\n                                        renderInput={(params) => (\r\n                                            <TextField\r\n                                                {...params}\r\n                                                variant=\"standard\"\r\n                                                label=\"Stock\"\r\n                                                placeholder=\"\"\r\n                                            />\r\n                                        )}\r\n                                    />\r\n                                    <div style={{ flex: 1 }}>\r\n                                        <Button\r\n                                            className=\"pt-2\"\r\n                                            color=\"primary\"\r\n                                            variant=\"contained\"\r\n                                            onClick={handleAdd}\r\n                                        >\r\n                                            <Icon>queue</Icon>\r\n                                            <span className=\"pl-1 capitalize\">\r\n                                                add\r\n                                            </span>\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            </Card>\r\n                            <Card className=\"px-6 py-4 mb-6\">\r\n                                <div className=\"card-title\">\r\n                                    <h1 style={{ color: 'green' }}>\r\n                                        Payment`${payment}`\r\n                                    </h1>\r\n                                </div>\r\n                                <div style={mystyle}>\r\n                                    <Input\r\n                                        root='color:\"red\"'\r\n                                        style={{\r\n                                            flex: 0.6,\r\n                                            textAlign: 'right',\r\n                                        }}\r\n                                        defaultValue={total}\r\n                                        value={payment}\r\n                                        onChange={(e) =>\r\n                                            setPayment(e.target.value)\r\n                                        }\r\n                                    ></Input>{' '}\r\n                                    <h1 style={{ flex: 1 }}>\r\n                                        ,00 / {total},00 DA\r\n                                    </h1>\r\n                                    <h2 style={{ flex: 1, color: 'red' }}>\r\n                                        {parseInt(total) - parseInt(payment) >\r\n                                        0 ? (\r\n                                            <div>\r\n                                                Credit:\r\n                                                {parseInt(total) -\r\n                                                    parseInt(payment)}\r\n                                                ,00 DA\r\n                                            </div>\r\n                                        ) : (\r\n                                            <div></div>\r\n                                        )}\r\n                                    </h2>\r\n                                    <div\r\n                                        style={{ flex: 1, alignItems: 'right' }}\r\n                                    >\r\n                                        <Button\r\n                                            className=\"pt-2\"\r\n                                            color=\"secondary\"\r\n                                            variant=\"contained\"\r\n                                            onClick={handleSubmit}\r\n                                        >\r\n                                            <Icon>shopping_cart</Icon>\r\n                                            <span className=\"pl-1 capitalize\">\r\n                                                Confirmer l'achat\r\n                                            </span>\r\n                                        </Button>\r\n                                    </div>\r\n                                </div>\r\n                            </Card>\r\n                            <div>\r\n                                <Dialog\r\n                                    open={open}\r\n                                    onClose={()=>setOpen(false)}\r\n                                    aria-labelledby=\"alert-dialog-title\"\r\n                                    aria-describedby=\"alert-dialog-description\"\r\n                                >\r\n                                    <DialogTitle id=\"alert-dialog-title\">\r\n                                        {\"Confirmer l'achat?\"}\r\n                                    </DialogTitle>\r\n                                    <DialogContent>\r\n                                        <DialogContentText id=\"alert-dialog-description\">\r\n                                            <h1>client:{clients?.filter(e=>e.id==op.client_id)[0]?.name}</h1>\r\n                                            <h1>achat:{rows.map(e=><h4>-{e.brand_name} ___  :prix_final:{e.prix_final},00DA ___  quantity:{e.quantity}</h4>)}</h1>\r\n                                            <h1>total:{total}</h1>\r\n                                            <h1>payment:{payment}</h1>\r\n                                            <h1>credit:{total-payment}</h1>\r\n                                        </DialogContentText>\r\n                                    </DialogContent>\r\n                                    <DialogActions>\r\n                                        <Button\r\n                                            onClick={()=>setOpen(false)}\r\n                                            color=\"primary\"\r\n                                        >\r\n                                            Disagree\r\n                                        </Button>\r\n                                        <Button\r\n                                            onClick={handleSubmit}\r\n                                            color=\"primary\"\r\n                                            autoFocus\r\n                                        >\r\n                                            Agree\r\n                                        </Button>\r\n                                    </DialogActions>\r\n                                </Dialog>\r\n                            </div>\r\n                        </>\r\n                    </Grid>\r\n\r\n                    <Grid item lg={4} md={4} sm={12} xs={12}>\r\n                        <Card >\r\n                       \r\n                            <DoughnutChart\r\n                                height=\"300px\"\r\n                                color={[\r\n                                    theme.palette.primary.dark,\r\n                                    theme.palette.primary.main,\r\n                                    theme.palette.primary.light,\r\n                                ]}\r\n                            />\r\n                        </Card>\r\n\r\n                        <div>\r\n                            <DigitalNumber\r\n                                nums={total + '.00'} // nums is the number your wanna show (defualt '123'\r\n                                color=\"#000\" // the active line color of number\r\n                                unActiveColor=\"#F17D13\" // the unactive line color of number\r\n                                backgroundColor=\"#F17D13\" // digital number container's background color\r\n                                transform\r\n                                transition=\"2s\"\r\n                            />\r\n                        </div>\r\n\r\n                        <Campaigns />\r\n                    </Grid>\r\n                </Grid>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\nconst mapStateToProps = (state) => ({\r\n    clients: state.clients.clients,\r\n    loading: state.clients.loading,\r\n    hasErrors: state.clients.hasErrors,\r\n    brands: state.stocks.brands,\r\n    stocks: state.stocks.stocks,\r\n})\r\n\r\nexport default connect(mapStateToProps)(Operation)\r\n"],"sourceRoot":""}
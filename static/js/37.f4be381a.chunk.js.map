{"version":3,"sources":["app/views/Drag&Drop/SimpleListDnD.jsx","app/views/Drag&Drop/SimpleHorizontalList.jsx","app/views/Drag&Drop/TwoListDnD.jsx","app/views/Drag&Drop/AppDragAndDrop.jsx"],"names":["SimpleListDnD","useState","item","setItem","useEffect","count","Array","from","length","v","k","map","id","content","onDragEnd","result","destination","tempItems","list","startIndex","endIndex","splice","removed","reorder","source","index","droppableId","provided","snapshot","droppableProps","ref","innerRef","style","isDraggingOver","borderRadius","background","padding","width","draggableId","draggableProps","dragHandleProps","isDragging","draggableStyle","userSelect","grid","margin","boxShadow","placeholder","SimpleHorizontalList","direction","display","overflow","getItems","offset","getItemStyle","theme","shadows","getListStyle","TwoListDnD","items","setItems","selected","setSelected","useTheme","getList","droppableSource","droppableDestination","sourceClone","destClone","move","droppable","droppable2","className","AppDragAndDrop","routeSegments","name","path","title"],"mappings":"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","file":"static/js/37.f4be381a.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\n// fake data generator\r\nconst getItems = (count) =>\r\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n        id: `item-${k}`,\r\n        content: `item ${k}`,\r\n    }))\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list)\r\n    const [removed] = result.splice(startIndex, 1)\r\n    result.splice(endIndex, 0, removed)\r\n\r\n    return result\r\n}\r\n\r\nconst grid = 8\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n    boxShadow: 'var(--elevation-z4)',\r\n    borderRadius: '4px',\r\n    // change background colour if dragging\r\n    background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n})\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n    borderRadius: '4px',\r\n    background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'var(--bg-default)',\r\n    padding: grid,\r\n    width: 250,\r\n})\r\n\r\nconst SimpleListDnD = () => {\r\n    const [item, setItem] = useState([])\r\n\r\n    useEffect(() => {\r\n        setItem(getItems(6))\r\n    }, [])\r\n\r\n    const onDragEnd = (result) => {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return\r\n        }\r\n\r\n        const tempItems = reorder(\r\n            item,\r\n            result.source.index,\r\n            result.destination.index\r\n        )\r\n        setItem(tempItems)\r\n    }\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                        style={getListStyle(snapshot.isDraggingOver)}\r\n                    >\r\n                        {item.map((item, index) => (\r\n                            <Draggable\r\n                                key={item.id}\r\n                                draggableId={item.id}\r\n                                index={index}\r\n                            >\r\n                                {(provided, snapshot) => (\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        style={getItemStyle(\r\n                                            snapshot.isDragging,\r\n                                            provided.draggableProps.style\r\n                                        )}\r\n                                    >\r\n                                        {item.content}\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default SimpleListDnD\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\n// fake data generator\r\nconst getItems = (count) =>\r\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n        id: `item-${k}`,\r\n        content: `item ${k}`,\r\n    }))\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list)\r\n    const [removed] = result.splice(startIndex, 1)\r\n    result.splice(endIndex, 0, removed)\r\n\r\n    return result\r\n}\r\n\r\nconst grid = 8\r\n\r\nconst getItemStyle = (isDragging, draggableStyle) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 ${grid}px 0 0`,\r\n    boxShadow: 'var(--elevation-z4)',\r\n    borderRadius: '4px',\r\n    // change background colour if dragging\r\n    background: isDragging ? 'var(--primary)' : 'var(--bg-paper)',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n})\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n    borderRadius: '4px',\r\n    background: isDraggingOver ? 'rgba(0,0,0, .1)' : 'var(--bg-default)',\r\n    display: 'flex',\r\n    padding: grid,\r\n    overflow: 'auto',\r\n})\r\n\r\nconst SimpleHorizontalList = () => {\r\n    const [item, setItem] = useState([])\r\n\r\n    useEffect(() => {\r\n        setItem(getItems(6))\r\n    }, [])\r\n\r\n    const onDragEnd = (result) => {\r\n        // dropped outside the list\r\n        if (!result.destination) {\r\n            return\r\n        }\r\n\r\n        const tempItems = reorder(\r\n            item,\r\n            result.source.index,\r\n            result.destination.index\r\n        )\r\n        setItem(tempItems)\r\n    }\r\n\r\n    // Normally you would want to split things out into separate components.\r\n    // But in this example everything is just done in one place for simplicity\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\" direction=\"horizontal\">\r\n                {(provided, snapshot) => (\r\n                    <div\r\n                        ref={provided.innerRef}\r\n                        style={getListStyle(snapshot.isDraggingOver)}\r\n                        {...provided.droppableProps}\r\n                    >\r\n                        {item.map((item, index) => (\r\n                            <Draggable\r\n                                key={item.id}\r\n                                draggableId={item.id}\r\n                                index={index}\r\n                            >\r\n                                {(provided, snapshot) => (\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                        style={getItemStyle(\r\n                                            snapshot.isDragging,\r\n                                            provided.draggableProps.style\r\n                                        )}\r\n                                    >\r\n                                        {item.content}\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default SimpleHorizontalList\r\n","import React, { useState, useEffect } from 'react'\r\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd'\r\nimport { useTheme } from '@material-ui/core/styles'\r\n\r\n// fake data generator\r\nconst getItems = (count, offset = 0) =>\r\n    Array.from({ length: count }, (v, k) => k).map((k) => ({\r\n        id: `item-${k + offset}`,\r\n        content: `item ${k + offset}`,\r\n    }))\r\n\r\n// a little function to help us with reordering the result\r\nconst reorder = (list, startIndex, endIndex) => {\r\n    const result = Array.from(list)\r\n    const [removed] = result.splice(startIndex, 1)\r\n    result.splice(endIndex, 0, removed)\r\n\r\n    return result\r\n}\r\n\r\n/**\r\n * Moves an item from one list to another list.\r\n */\r\nconst move = (source, destination, droppableSource, droppableDestination) => {\r\n    const sourceClone = Array.from(source)\r\n    const destClone = Array.from(destination)\r\n    const [removed] = sourceClone.splice(droppableSource.index, 1)\r\n\r\n    destClone.splice(droppableDestination.index, 0, removed)\r\n\r\n    const result = {}\r\n    result[droppableSource.droppableId] = sourceClone\r\n    result[droppableDestination.droppableId] = destClone\r\n\r\n    return result\r\n}\r\n\r\nconst grid = 8\r\n\r\nconst getItemStyle = (isDragging, draggableStyle, theme) => ({\r\n    // some basic styles to make the items look a bit nicer\r\n    userSelect: 'none',\r\n    padding: grid * 2,\r\n    margin: `0 0 ${grid}px 0`,\r\n    boxShadow: theme.shadows[4],\r\n    borderRadius: '4px',\r\n    // change background colour if dragging\r\n    background: isDragging\r\n        ? 'rgba(var(--primary),1)'\r\n        : 'rgba(var(--bg-paper),1)',\r\n\r\n    // styles we need to apply on draggables\r\n    ...draggableStyle,\r\n})\r\n\r\nconst getListStyle = (isDraggingOver) => ({\r\n    borderRadius: '4px',\r\n    background: isDraggingOver\r\n        ? 'rgba(0,0,0, .1)'\r\n        : 'rgba(var(--bg-default),1)',\r\n    padding: grid,\r\n    width: 250,\r\n})\r\n\r\nconst TwoListDnD = () => {\r\n    const [items, setItems] = useState([])\r\n    const [selected, setSelected] = useState([])\r\n    const theme = useTheme()\r\n\r\n    useEffect(() => {\r\n        setItems(getItems(10))\r\n        setSelected(getItems(5, 10))\r\n    }, [])\r\n\r\n    const getList = (id) => (id === 'droppable' ? items : selected)\r\n\r\n    const onDragEnd = (result) => {\r\n        const { source, destination } = result\r\n\r\n        // dropped outside the list\r\n        if (!destination) {\r\n            return\r\n        }\r\n\r\n        if (source.droppableId === destination.droppableId) {\r\n            const items = reorder(\r\n                getList(source.droppableId),\r\n                source.index,\r\n                destination.index\r\n            )\r\n\r\n            if (source.droppableId === 'droppable2') {\r\n                setSelected(items)\r\n            } else setItems(items)\r\n        } else {\r\n            const result = move(\r\n                getList(source.droppableId),\r\n                getList(destination.droppableId),\r\n                source,\r\n                destination\r\n            )\r\n\r\n            setItems(result.droppable)\r\n            setSelected(result.droppable2)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <div className=\"flex justify-around\">\r\n                <Droppable droppableId=\"droppable\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}\r\n                        >\r\n                            {items.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}\r\n                                >\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style,\r\n                                                theme\r\n                                            )}\r\n                                        >\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n                <Droppable droppableId=\"droppable2\">\r\n                    {(provided, snapshot) => (\r\n                        <div\r\n                            ref={provided.innerRef}\r\n                            style={getListStyle(snapshot.isDraggingOver)}\r\n                        >\r\n                            {selected.map((item, index) => (\r\n                                <Draggable\r\n                                    key={item.id}\r\n                                    draggableId={item.id}\r\n                                    index={index}\r\n                                >\r\n                                    {(provided, snapshot) => (\r\n                                        <div\r\n                                            ref={provided.innerRef}\r\n                                            {...provided.draggableProps}\r\n                                            {...provided.dragHandleProps}\r\n                                            style={getItemStyle(\r\n                                                snapshot.isDragging,\r\n                                                provided.draggableProps.style,\r\n                                                theme\r\n                                            )}\r\n                                        >\r\n                                            {item.content}\r\n                                        </div>\r\n                                    )}\r\n                                </Draggable>\r\n                            ))}\r\n                            {provided.placeholder}\r\n                        </div>\r\n                    )}\r\n                </Droppable>\r\n            </div>\r\n        </DragDropContext>\r\n    )\r\n}\r\n\r\nexport default TwoListDnD\r\n","import React from 'react'\r\nimport SimpleListDnD from './SimpleListDnD'\r\nimport { Breadcrumb, SimpleCard } from 'app/components'\r\nimport SimpleHorizontalList from './SimpleHorizontalList'\r\nimport TwoListDnD from './TwoListDnD'\r\n\r\nconst AppDragAndDrop = () => {\r\n    return (\r\n        <div className=\"m-sm-30\">\r\n            <div className=\"mb-sm-30\">\r\n                <Breadcrumb\r\n                    routeSegments={[\r\n                        { name: 'others', path: '/drag-and-drop' },\r\n                        { name: 'Drag and Drop' },\r\n                    ]}\r\n                />\r\n            </div>\r\n            <SimpleCard title=\"Simple List Drag and Drop\">\r\n                <SimpleListDnD />\r\n            </SimpleCard>\r\n            <div className=\"py-3\" />\r\n            <SimpleCard title=\"Simple Horizontal List Drag and Drop\">\r\n                <SimpleHorizontalList />\r\n            </SimpleCard>\r\n            <div className=\"py-3\" />\r\n            <SimpleCard title=\"Simple Two List Drag and Drop\">\r\n                <TwoListDnD />\r\n            </SimpleCard>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppDragAndDrop\r\n"],"sourceRoot":""}